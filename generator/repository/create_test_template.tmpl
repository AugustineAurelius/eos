package {{.PackageName}}_test

import (
    "context"
    "testing"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "github.com/jmoiron/sqlx"
    _ "database/sqlite" // Adjust import for your database driver

	"{{.ModulePath}}"
)

// TestCreate{{.MessageName}} tests the Create{{.MessageName}} function.
func TestCreate{{.MessageName}}(t *testing.T) {
    db, err := sqlx.Open("sqlite3", ":memory:")
    require.NoError(t, err)

    createTableSQL := `
    CREATE TABLE Table{{.MessageName}} (
        id INTEGER PRIMARY KEY,
        name TEXT,
        age INTEGER
        -- other columns
    );
    `
    _, err = db.Exec(createTableSQL)
    require.NoError(t, err)

    r := &repository{db: db}

    t.Run("Success", func(t *testing.T) {
        valid{{.MessageName}} := &{{.MessageName}}{
            Name: "TestName",
            Age:  30,
        }

        err := r.Create{{.MessageName}}(context.Background(), valid{{.MessageName}})

        require.NoError(t, err)

        var result {{.MessageName}}
        err = db.Get(&result, "SELECT * FROM Table{{.MessageName}} WHERE id = ?", valid{{.MessageName}}.ID)
        require.NoError(t, err)
        assert.Equal(t, valid{{.MessageName}}, &result)
    })

    t.Run("Error", func(t *testing.T) {
        faulty{{.MessageName}} := &{{.MessageName}}{
            Name: "",
            Age:  -1,
        }

        err := r.Create{{.MessageName}}(context.Background(), faulty{{.MessageName}})

        require.Error(t, err)

        var count int
        err = db.Get(&count, "SELECT COUNT(*) FROM Table{{.MessageName}}")
        require.NoError(t, err)
        assert.Equal(t, 0, count)
    })

    t.Run("CanceledContext", func(t *testing.T) {
        ctx, cancel := context.WithCancel(context.Background())
        cancel()

        valid{{.MessageName}} := &{{.MessageName}}{
            Name: "CanceledTest",
            Age:  40,
        }

        err := r.Create{{.MessageName}}(ctx, valid{{.MessageName}})

        require.Error(t, err)
        assert.True(t, context.Canceled == err || context.DeadlineExceeded == err)

        var count int
        err = db.Get(&count, "SELECT COUNT(*) FROM Table{{.MessageName}}")
        require.NoError(t, err)
        assert.Equal(t, 0, count)
    })

    db.Close()
}
