//Code generated by generator, DO NOT EDIT.

/*
Example SQL for PostgreSQL table creation:

CREATE TABLE IF NOT EXISTS {{.TableName | snakeCase}} (
{{- range $i, $field := .Fields }}
    {{- if $i}},{{end}}
    {{ $field.Column | snakeCase}} {{- if eq $field.Type "int" "int8" "int16" "int32" "int64"}} INTEGER{{- else if eq $field.Type "uint" "uint8" "uint16" "uint32" "uint64" "uintptr"}} BIGINT{{- else if eq $field.Type "float32"}} REAL{{- else if eq $field.Type "float64"}} DOUBLE PRECISION{{- else if eq $field.Type "string"}} TEXT{{- else if eq $field.Type "bool"}} BOOLEAN{{- else if eq $field.Type "uuid.UUID" "*uuid.UUID"}} UUID{{- else if eq $field.Type "decimal.Decimal" "*decimal.Decimal"}} NUMERIC{{- else}} TEXT{{- end}}
    {{- if not (contains $field.Type "*")}} NOT NULL{{- end}}
    {{- if eq $field.Name "ID"}} PRIMARY KEY{{- end}}
{{- end }}
);

*/
package {{.PackageName}}

import (
	"context"

	"github.com/AugustineAurelius/eos/pkg/generics"
	sq "github.com/Masterminds/squirrel"
)

// builderParams represents optional query parameters.
type BuilderParams struct {
	OrderBy   *string // Column and direction for sorting (e.g., "id ASC")
	SearchCol *string // Column to search in (e.g., "name")
	SearchTerm *string // Term to search for (e.g., "alice")
	Offset    *int    // Initial offset for pagination
	Limit     *int    // Number of rows to fetch per batch
	MaxRows    *int
}

type Cursor struct {
	pool      querier 
	builder   sq.SelectBuilder
	rows      []{{.MessageName}}
	index     int
	offset    int
	limit     int
	params    BuilderParams
	ctx       context.Context
	totalRows int 
	closed    bool 
}

type Query interface {
	Get(ctx context.Context, opts ...FilterOpt) (*{{.MessageName}}, error)
	GetMany(ctx context.Context, opts ...FilterOpt) (generics.SliceOps[{{.MessageName}}], error)
	Has(ctx context.Context, opts ...FilterOpt) (bool, error)
	GetIterator(ctx context.Context, opts ...FilterOpt) generics.IterWithErr[{{.MessageName}}]
	Count(ctx context.Context, opts ...FilterOpt) (int, error)
	NewCursor(ctx context.Context, params BuilderParams, opts ...FilterOpt) *Cursor
}

type Command interface {
	Query
	Create(ctx context.Context, model *{{.MessageName}}) error
	CreateMany(ctx context.Context, {{.MessageName | lower}}s []{{.MessageName}}) error
	Update(ctx context.Context, u Update, opts ...FilterOpt) error
	Upsert(ctx context.Context, model *{{.MessageName}}) error
	{{- if and .HasIDField .SupportsSave}}
	Save(ctx context.Context, model *{{.MessageName}}) error
	{{- end}}
	Delete(ctx context.Context, opts ...FilterOpt) error
}
