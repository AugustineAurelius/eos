//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

{{if .WithTx}}
import (
	"context"
	"fmt"
	txrunner "{{.TxRunnerPath}}" 
  common "{{.CommonPath}}"

	sq "github.com/Masterminds/squirrel"
	"github.com/google/uuid"
)
{{else}}
import (
	"context"
	"fmt"

	sq "github.com/Masterminds/squirrel"
	"github.com/google/uuid"
)
{{end}}


{{if .WithTx}}
// Update{{.MessageName}} updates an existing {{.MessageName}} in the database.
func (r *repository) Update{{.MessageName}}(ctx context.Context,  id uuid.UUID, u {{.MessageName}}Update) error {
	if tx, ok := txrunner.FromContex(ctx); ok {
		return update(ctx, tx, id, u)
    } else {
		return update(ctx, r.db, id, u)
    }
}

func update(ctx context.Context, run common.Querier, id uuid.UUID, u {{.MessageName}}Update) error {
    b:= sq.Update(Table{{.MessageName}}).PlaceholderFormat(sq.Dollar).Where(sq.Eq{Column{{.MessageName}}ID: id})
    b = ApplySet(b, u)
	query, args := b.MustSql()
	if _, err := run.Exec(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec update query %s with args %v", query, args)
	}
	return nil 
}

// Update{{.MessageName}} updates an existing {{.MessageName}} in the database.
func (r *repository) UpdateMany{{.MessageName}}(ctx context.Context,  f {{.MessageName}}Filter, u  {{.MessageName}}Update) error {
	if tx, ok := txrunner.FromContex(ctx); ok {
		return updateMany(ctx, tx, f, u)
    } else {
		return updateMany(ctx, r.db, f, u)
    }
}

func updateMany(ctx context.Context, run common.Querier,  f {{.MessageName}}Filter, u  {{.MessageName}}Update) error {
    b:= sq.Update(Table{{.MessageName}}).PlaceholderFormat(sq.Dollar)

	b = ApplyWhere(b, f)

    b = ApplySet(b, u)
	
	query, args := b.MustSql()
	if _, err := run.Exec(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec update query %s with args %v error = %w", query, args, err)
	}
	return nil 
}
{{else}}
// Update{{.MessageName}} updates an existing {{.MessageName}} in the database.
func (r *repository) Update{{.MessageName}}(ctx context.Context,  id uuid.UUID, u  {{.MessageName}}Update) error {
    b:= sq.Update(Table{{.MessageName}}).PlaceholderFormat(sq.Dollar).Where(sq.Eq{Column{{.MessageName}}ID: id})
    b = ApplySet(b, u)
	query, args := b.MustSql()
	if _, err := r.db.Exec(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec update query %s with args %v", query, args)
	}
	return nil 
}

// Update{{.MessageName}} updates an existing {{.MessageName}} in the database.
func (r *repository) UpdateMany{{.MessageName}}(ctx context.Context,  f {{.MessageName}}Filter, u  {{.MessageName}}Update) error {
    b:= sq.Update(Table{{.MessageName}}).PlaceholderFormat(sq.Dollar)

	b = ApplyWhere(b, f)

    b = ApplySet(b, u)
	
	query, args := b.MustSql()
	if _, err := r.db.Exec(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec update query %s with args %v error = %w", query, args, err)
	}
	return nil 
}
{{end}}


