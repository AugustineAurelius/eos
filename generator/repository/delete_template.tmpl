//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

{{if .WithTx}}
import (
	"context"
	"fmt"
	txrunner "{{.TxRunnerPath}}" 
 	common "{{.CommonPath}}"

	sq "github.com/Masterminds/squirrel"
)
{{else}}
import (
	"context"
	"fmt"

	sq "github.com/Masterminds/squirrel"
)
{{end}}

{{if .WithTx}}
// Delete{{.MessageName}} deletes a {{.MessageName}} by ID.
func (r *CommandRepository) Delete(ctx context.Context, opts ...FilterOpt) error {
	if tx, ok := txrunner.FromContex(ctx); ok {
		return delete(ctx, tx, opts...)
    } else {
		return delete(ctx, r.db, opts...)
    }
}

func delete(ctx context.Context, run common.Querier, opts ...FilterOpt) error {
	b := sq.Delete(Table{{.MessageName}}).PlaceholderFormat(sq.Question)
	f := &Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](f)
	}
	b = ApplyWhere(b, *f)
	query, args := 	b.MustSql()	
	if _, err := run.Exec(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec delete query %s with args %v error = %w", query, args, err)
	}
	return nil
}


{{else}}
// Delete{{.MessageName}} deletes a {{.MessageName}} by ID.
func (r *CommandRepository) Delete(ctx context.Context, opts ...FilterOpt) error {
	b := sq.Delete(Table{{.MessageName}}).PlaceholderFormat(sq.Question)
	f := &Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](f)
	}
	b = ApplyWhere(b, *f)
	query, args := 	b.MustSql()	
	if _, err := r.db.Exec(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec delete query %s with args %v error = %w", query, args, err)
	}
	return nil
}
{{end}}

