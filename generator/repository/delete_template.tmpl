//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

{{if .WithTx}}
import (
	"context"
	"fmt"
	txrunner "{{.TxRunnerPath}}" 
 	common "{{.CommonPath}}"

	sq "github.com/Masterminds/squirrel"
	"github.com/google/uuid"
)
{{else}}
import (
	"context"
	"fmt"

	sq "github.com/Masterminds/squirrel"
	"github.com/google/uuid"
)
{{end}}

{{if .WithTx}}
// Delete{{.MessageName}} deletes a {{.MessageName}} by ID.
func (r *repository) Delete{{.MessageName}}(ctx context.Context, id uuid.UUID) error {
	if tx, ok := txrunner.FromContex(ctx); ok {
		return delete(ctx, tx, id)
    } else {
		return delete(ctx, r.db, id)
    }
}

func delete(ctx context.Context, run common.Querier,id uuid.UUID) error {
	query, args := sq.Delete(Table{{.MessageName}}).
		Where(sq.Eq{Column{{.MessageName}}ID: id}).PlaceholderFormat(sq.Question).MustSql()

	if _, err := run.Exec(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec delete query %s with args %v error = %w", query, args, err)
	}
	return nil
}

// DeleteMany{{.MessageName}} retrieves a {{.MessageName}} by filter.
func (r *repository) DeleteMany{{.MessageName}}(ctx context.Context, f {{.MessageName}}Filter) error {
	if tx, ok := txrunner.FromContex(ctx); ok {
		return deleteMany(ctx, tx, f)
    } else {
		return deleteMany(ctx, r.db, f)
    }
}

func deleteMany(ctx context.Context, run common.Querier, f {{.MessageName}}Filter) error {
	b := sq.Delete(Table{{.MessageName}}).PlaceholderFormat(sq.Question)

	b = ApplyWhere(b, f)

    query, args := 	b.MustSql()

	_, err := run.Exec(ctx, query, args...)
	if err != nil {
		return fmt.Errorf("error querying database: %w", err)
	}

	return err
}

{{else}}
// Delete{{.MessageName}} deletes a {{.MessageName}} by ID.
func (r *repository) Delete{{.MessageName}}(ctx context.Context, id uuid.UUID) error {
	query, args := sq.Delete(Table{{.MessageName}}).
		Where(sq.Eq{Column{{.MessageName}}ID: id}).PlaceholderFormat(sq.Question).MustSql()

	if _, err := r.db.Exec(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec delete query %s with args %v error = %w", query, args, err)
	}
	return nil
}

// DeleteMany{{.MessageName}} retrieves a {{.MessageName}} by filter.
func (r *repository) DeleteMany{{.MessageName}}s(ctx context.Context, f {{.MessageName}}Filter) error {
	b := sq.Delete(Table{{.MessageName}}).PlaceholderFormat(sq.Question)

	b = ApplyWhere(b, f)

    query, args := 	b.MustSql()

	_, err := r.db.Exec(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}

	return err
}
{{end}}

