//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

import (
	"sort"
	"iter"
	"slices"
	"reflect"
    {{- range .Imports }}
    {{ . }}
    {{- end }}
)


type {{.MessageName}}s []{{.MessageName}}

{{- range .Fields }}
func (s {{$.MessageName}}s) To{{.Name}}s ()  []{{.Type}} {
	output := make([]{{.Type}}, 0, len(s))
	for i := 0; i < len(s); i++{
    output = append(output, s[i].{{.Name}})
	}
	return output
}
{{- end }}


{{- range .Fields }}
	{{- if contains .Type "[]"}}
	{{- else}}
func (s {{$.MessageName}}s) FindBy{{.Name}} (finder {{.Type}})  ({{$.MessageName}}, bool) {
	for i := 0; i < len(s); i++{
		if s[i].{{.Name}}  == finder {
			return s[i], true 
		}
	}
	return   {{$.MessageName}} {}, false
}
{{- end }}
{{- end}}


{{- range .Fields }}
	{{- if contains .Type "[]"}}
	{{- else if contains .Type "time.Time"}}
func (s {{$.MessageName}}s) SortBy{{.Name}} (asc bool)  {{$.MessageName}}s {
	{{- if contains .Type "*"}}
	if asc {
		sort.Slice(s, func(i, j int) bool {
			return s[i].{{.Name}}.Before( *s[j].{{.Name}})
		})
		return s
	}	
	sort.Slice(s, func(i, j int) bool {
		return s[i].{{.Name}}.After( *s[j].{{.Name}})
	})
	return  s
	{{- else}}
	if asc {
		sort.Slice(s, func(i, j int) bool {
			return s[i].{{.Name}}.Before( s[j].{{.Name}})
		})
		return s
	}	
	sort.Slice(s, func(i, j int) bool {
		return s[i].{{.Name}}.After(s[j].{{.Name}})
	})
	return  s
	{{- end}}
}
	{{- else if contains .Type "bool"}}
	{{- else if contains .Type "."}}
	{{- else}}
func (s {{$.MessageName}}s) SortBy{{.Name}} (asc bool)  {{$.MessageName}}s {
	{{- if contains .Type "*"}}
	if asc {
		sort.Slice(s, func(i, j int) bool {
			return *s[i].{{.Name}} < *s[j].{{.Name}}
		})
		return s
	}	
	sort.Slice(s, func(i, j int) bool {
		return *s[i].{{.Name}} > *s[j].{{.Name}}
	})
	return  s
	{{- else}}
	if asc {
		sort.Slice(s, func(i, j int) bool {
			return s[i].{{.Name}} < s[j].{{.Name}}
		})
		return s
	}	
	sort.Slice(s, func(i, j int) bool {
		return s[i].{{.Name}} > s[j].{{.Name}}
	})
	return  s
	{{- end}}
}
	{{- end}}
{{- end }}




func (s {{$.MessageName}}s) FilterFunc(f func(i {{.MessageName}}) bool)  {{.MessageName}}s {
	output := make({{.MessageName}}s, 0, len(s))
	for i := 0; i < len(s); i++{ 
		if f(s[i]) {
			output = append(output, s[i])
		}
	}
	return output
}

{{- range .Fields }}
func (s {{$.MessageName}}s) GetFirst{{.Name}}()  (*{{.Type}}, bool) {
	if len(s) < 1 {
		return nil, false
	}
	return &s[0].{{.Name}}, true
}
{{- end }}



func (s {{$.MessageName}}s) GetFirst()  ({{.MessageName}}, bool) {
	if len(s) < 1 {
		return {{.MessageName}}{}, false
	}
	return s[0], true
}

func (s {{.MessageName}}s) All() iter{{.MessageName}} {
    return func(yield func({{.MessageName}}) bool) {
        for _, elem := range s {
            if !yield(elem) {
                return
            }
        }
    }
}

// Iterators
type iter{{.MessageName}} iter.Seq[{{.MessageName}}]

func (i iter{{.MessageName}}) FilterFunc(predicate func({{.MessageName}}) bool) iter{{.MessageName}} {
    return func(yield func({{.MessageName}}) bool) {
        for elem := range i {
            if predicate(elem) && !yield(elem) {
                return
            }
        }
    }
}


func (i iter{{.MessageName}}) Map(transform func({{.MessageName}}) {{.MessageName}}) iter{{.MessageName}} {
    return func(yield func({{.MessageName}}) bool) {
        for elem := range i {
            if !yield(transform(elem)) {
                return
            }
        }
    }
}

func (i iter{{.MessageName}}) Take(n int) iter{{.MessageName}}  {
	count := 0
	return func(yield func({{.MessageName}}) bool) {
		for elem := range i {
			if count >= n || !yield(elem) {
				return
			}
			count++
		}
	}
}

func (i iter{{.MessageName}}) Find(findFunc func({{.MessageName}}) bool) iter{{.MessageName}} {
	return func(yield func({{.MessageName}}) bool ){
	  for elem := range i {
            if findFunc(elem) && !yield(elem) {
                return
            }
        }
	}
}

// doesnot work with pointers
func (i iter{{.MessageName}}) Distinct(keyFunc func({{.MessageName}}) any) iter{{.MessageName}} {
    seen := make(map[any]bool)
    return func(yield func({{.MessageName}}) bool) {
        for elem := range i {
            key := keyFunc(elem)
			if key != nil {
                val := reflect.ValueOf(key)
                switch val.Kind() {
                case reflect.Ptr, reflect.Interface, 
                     reflect.Slice, reflect.Map, 
                     reflect.Chan, reflect.Func:
                    if val.IsNil() {
                        continue
                    }
                }
            }
            if !seen[key] {
                seen[key] = true
                if !yield(elem) {
                    return
                }
            }
        }
    }
}

{{- range .Fields }}
func (i iter{{$.MessageName}}) FilterBy{{.Name}}({{.Name | lower}} {{.Type}}) iter{{$.MessageName}} {
	return func(yield func({{$.MessageName}}) bool ){
	  for elem := range i {
            if {{.Name | lower}} == elem.{{.Name}} && !yield(elem) {
                return
            }
        }
	}
}
{{- end}}

func (i iter{{.MessageName}}) First() ({{.MessageName}}, bool) {
    for elem := range i {
        return elem, true
    }
    return {{.MessageName}}{}, false
}


func (i iter{{.MessageName}}) ForEach(f func({{.MessageName}}) )  {
	for elem := range i {
		f(elem)
	}
}

func (i iter{{.MessageName}}) Collect() ([]{{.MessageName}}) {
	return slices.Collect(iter.Seq[{{.MessageName}}](i))
}