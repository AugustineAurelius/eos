//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

import (
	"context"
	"fmt"

	sq "github.com/Masterminds/squirrel"
)

// Upsert{{.MessageName}} inserts a new {{.MessageName}} or updates an existing one.
func (r *CommandRepository) Upsert(ctx context.Context, model *{{.MessageName}}) error {
	var query string
	var args []any

	switch r.placeholder {
	case DollarWildcard:
		query, args = sq.Insert(Table{{.MessageName}}).
			Columns({{- .Fields | columns_create -}}).
			Values({{- .Fields | values_create -}}).
			Suffix("ON CONFLICT (id) DO UPDATE SET {{- range $i, $field := .Fields -}}{{if ne $field.Name "ID"}}{{if $i}}, {{end}}{{.Column | snakeCase}} = EXCLUDED.{{.Column | snakeCase}}{{end}}{{end}}").
			PlaceholderFormat(sq.Dollar).
			MustSql()
	default:
		query, args = sq.Insert(Table{{.MessageName}}).
			Columns({{- .Fields | columns_create -}}).
			Values({{- .Fields | values_create -}}).
			Suffix("ON CONFLICT (id) DO UPDATE SET {{- range $i, $field := .Fields -}}{{if ne $field.Name "ID"}}{{if $i}}, {{end}}{{.Column | snakeCase}} = EXCLUDED.{{.Column | snakeCase}}{{end}}{{end}}").
			PlaceholderFormat(sq.Question).
			MustSql()
	}

	if _, err := r.runner.ExecContext(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec upsert query %s with args %v error = %w", query, args, err)
	}
	return nil
}
