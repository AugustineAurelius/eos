//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

import (
	"context"
	"fmt"

	sq "github.com/Masterminds/squirrel"
)

// Create{{.MessageName}} inserts a new {{.MessageName}} into the database.
func (r *CommandRepository) Create (ctx context.Context, model *{{.MessageName}}) error {
  var query string
  var args []any
  
	switch r.placeholder {
	case DollarWildcard:
		query, args = sq.Insert(Table{{.MessageName}}).
    Columns({{.Fields | columns}}).
		Values(model.Values()...).
    PlaceholderFormat(sq.Dollar).
    MustSql()
  default:
		query, args = sq.Insert(Table{{.MessageName}}).
    Columns({{.Fields | columns}}).
		Values(model.Values()...).
    PlaceholderFormat(sq.Question).
    MustSql()	
  }

	if _, err := r.runner.ExecContext(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec create query %s with args %v error = %w", query, args, err)
	}
	return nil
}


// Create{{.MessageName}} inserts a new {{.MessageName}} into the database.
func (r *CommandRepository) CreateMany (ctx context.Context, {{.MessageName | lower}}s []{{.MessageName}}) error {
  var builder sq.InsertBuilder

	switch r.placeholder {
	case DollarWildcard:
	  builder = sq.Insert(Table{{.MessageName}}).Columns({{.Fields | columns}}). PlaceholderFormat(sq.Dollar)
  default:
	  builder = sq.Insert(Table{{.MessageName}}).Columns({{.Fields | columns}}). PlaceholderFormat(sq.Question)
  }

  for _, model := range {{.MessageName | lower}}s {
    builder = builder.Values(model.Values()...)
  }
	query, args := 	builder.MustSql()

	if _, err := r.runner.ExecContext(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec create query %s with args %v error = %w", query, args, err)
	}
	return nil
}
