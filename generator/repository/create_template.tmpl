//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}


{{if .WithTx}}
import (
	"context"
	"fmt"

	txrunner "{{.TxRunnerPath}}" 
	common "{{.CommonPath}}"

	sq "github.com/Masterminds/squirrel"
)
{{else}}
import (
	"context"
	"fmt"
	"database/sql"
	sq "github.com/Masterminds/squirrel"
)
{{end}}

{{if .WithTx}}
// Create{{.MessageName}} inserts a new {{.MessageName}} into the database.
func (r *CommandRepository) Create (ctx context.Context, {{.MessageName | lower}} *{{.MessageName}}) error {
	if tx, ok := txrunner.FromContex(ctx); ok {
		return create(ctx, tx, {{.MessageName | lower}})
    } else {
		return create(ctx, r.db, {{.MessageName | lower}})
    }
}


func create(ctx context.Context, run common.Querier, {{.MessageName | lower}} *{{.MessageName}}) error {
	model := Converter(*{{.MessageName | lower}})
	query, args := sq.Insert(Table{{.MessageName}}).
		Columns({{.Fields | columns}}).
		Values(model.Values()...).PlaceholderFormat(sq.Question).MustSql()

	if _, err := run.Exec(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec create query %s with args %v error = %w", query, args, err)
	}
	return nil
}


{{else}}
// Create{{.MessageName}} inserts a new {{.MessageName}} into the database.
func (r *CommandRepository) Create(ctx context.Context,  {{.MessageName | lower}} *{{.MessageName}}) error {
	model := Converter(*{{.MessageName | lower}})
	query, args := sq.Insert(Table{{.MessageName}}).
		Columns({{.Fields | columns}}).
		Values(model.Values()...).PlaceholderFormat(sq.Question).MustSql()

	if _, err := r.db.Exec(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec create query %s with args %v error = %w", query, args, err)
	}
	return nil
}
{{end}}


func CreateSQLTx(ctx context.Context, run *sql.Tx, {{.MessageName | lower}} *{{.MessageName}}) error {
	model := Converter(*{{.MessageName | lower}})
	query, args := sq.Insert(Table{{.MessageName}}).
		Columns({{.Fields | columns}}).
		Values(model.Values()...).PlaceholderFormat(sq.Question).MustSql()

	if _, err := run.ExecContext(ctx, query, args...); err != nil {
		return fmt.Errorf("failed to exec create query %s with args %v error = %w", query, args, err)
	}
	return nil
}