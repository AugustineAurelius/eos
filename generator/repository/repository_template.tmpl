//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

import (
	sq "github.com/Masterminds/squirrel"
	common "{{.CommonPath}}"
    {{- range .Imports }}
    {{ . }}
    {{- end }}
)



type repository struct{
	db common.Querier
}

func New(db common.Querier) *repository {
	return &repository{
		db: db,
	}
}

// {{.MessageName}}Filer represents the {{.MessageName}} filter.
type {{.MessageName}}Filter struct {
{{- range .Fields }}
  {{.Name | lower}} *{{.Type}}
  {{.Name | lower}}s []{{.Type}}
{{- end }}
}

func NewFilter() *{{.MessageName}}Filter{
	return &{{.MessageName}}Filter{}
}


{{- range .Fields }}
func (f *{{$.MessageName}}Filter) {{.Name}} ({{.Name | lower}} {{.Type}})  *{{$.MessageName}}Filter {
  f.{{.Name | lower}} = &{{.Name | lower}}
  return f
}

func (f *{{$.MessageName}}Filter) AddOneTo{{.Name}}s ({{.Name | lower}} {{.Type}})  *{{$.MessageName}}Filter {
  f.{{.Name | lower}}s = append(f.{{.Name | lower}}s, {{.Name | lower}})
  return f
}

func (f *{{$.MessageName}}Filter) {{.Name}}s ({{.Name | lower}}s []{{.Type}})  *{{$.MessageName}}Filter {
  f.{{.Name | lower}}s =  {{.Name | lower}}s
  return f
}
{{- end }}


func ApplyWhere[B interface {
    Where(pred interface{}, args ...interface{}) B
}](b B,f {{$.MessageName}}Filter) B {
  {{- range .Fields }}
	if f.{{.Name | lower}} != nil {
      b = b.Where(sq.Eq{Column{{$.MessageName}}{{.Name}}: *f.{{.Name | lower}}})
    }
	if f.{{.Name | lower}}s != nil {
      b = b.Where(sq.Eq{Column{{$.MessageName}}{{.Name}}: f.{{.Name | lower}}s})
    }
  {{- end }}
  return b
}

// {{.MessageName}}Update represents the {{.MessageName}} update struct.
type {{.MessageName}}Update struct {
{{- range .Fields }}
  {{.Name | lower}} *{{.Type}}
{{- end }}
}

func NewUpdate() *{{.MessageName}}Update{
	return &{{.MessageName}}Update{}
}

{{- range .Fields }}
func (u *{{$.MessageName}}Update) {{.Name}} ({{.Name | lower}} {{.Type}})  *{{$.MessageName}}Update {
  u.{{.Name | lower}} = &{{.Name | lower}}
  return u
}
{{- end }}


func ApplySet[B interface {
    Set(column string, value interface{}) B
}] (b B, f {{$.MessageName}}Update) B {
  {{- range .Fields }}
	if f.{{.Name | lower}} != nil {
      b = b.Set(Column{{$.MessageName}}{{.Name}}, *f.{{.Name | lower}})
    }
  {{- end }}

  return b
}

type {{.MessageName}}s []{{.MessageName}}

{{- range .Fields }}
func (s {{$.MessageName}}s) To{{.Name}}s ()  []{{.Type}} {
	output := make([]{{.Type}}, 0, len(s))
	for _, item := range s {
		output = append(output, item.{{.Name}})
	}
	return output
}
{{- end }}

func (s {{$.MessageName}}s) Filter{{.MessageName}}s(f func(i {{.MessageName}}) bool)  {{.MessageName}}s {
	output := make({{.MessageName}}s, 0, len(s))
	for _, item := range s {
		if f(item) {
			output = append(output, item)
		}
	}
	return output
}
