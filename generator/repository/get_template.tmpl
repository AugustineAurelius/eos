//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

import (
	"context"
	"fmt"

	"github.com/AugustineAurelius/eos/pkg/generics"
	sq "github.com/Masterminds/squirrel"
	{{- range .Imports }}
  {{ . }}
  {{- end }}
)


func (r *CommandRepository) Get(ctx context.Context,  opts ...FilterOpt) (*{{.MessageName}}, error) {
	return get(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) Get(ctx context.Context,  opts ...FilterOpt) (*{{.MessageName}}, error) {
	return get(ctx, r.runner, r.placeholder, opts...)
}


func (r *CommandRepository) GetMany(ctx context.Context, opts ...FilterOpt) (generics.SliceOps[{{.MessageName}}], error) {
	return getMany(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetMany(ctx context.Context, opts ...FilterOpt) (generics.SliceOps[{{.MessageName}}], error) {
	return getMany(ctx, r.runner, r.placeholder, opts...)
}

func get(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) (*{{.MessageName}}, error){
  	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select({{- .Fields | columns -}}).From(Table{{.MessageName}}).PlaceholderFormat(sq.Dollar)
	default:
		b = sq.Select({{- .Fields | columns -}}).From(Table{{.MessageName}}).PlaceholderFormat(sq.Question)
	}
  
	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

  	query, args := b.MustSql()

	var model {{.MessageName}}
	err := run.QueryRowContext(ctx, query, args...).Scan({{- .Fields | scan }})
	if err != nil {
		return nil, fmt.Errorf("failed to get query %s with args %v error = %w" , query, args, err)
	}


	return &model, err
}

func getMany(ctx context.Context, run querier, placeholder wildcard,  opts ...FilterOpt) (generics.SliceOps[{{.MessageName}}], error) {
  	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select({{- .Fields | columns -}}).From(Table{{.MessageName}}).PlaceholderFormat(sq.Dollar)  
	default:
		b = sq.Select({{- .Fields | columns -}}).From(Table{{.MessageName}}).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

 	query, args := b.MustSql()

  	var {{.MessageName | lower}}s generics.SliceOps[{{.MessageName}}]
	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()


	var model {{.MessageName}}
	for rows.Next() {
		err = rows.Scan({{- .Fields | scan -}})
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		{{.MessageName | lower}}s = append({{.MessageName | lower}}s, model)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return {{.MessageName | lower}}s, err
}

func (r *CommandRepository) GetIterator(ctx context.Context, opts ...FilterOpt) generics.IterWithErr[{{.MessageName}}] {
	return getIterator(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetIterator(ctx context.Context, opts ...FilterOpt) generics.IterWithErr[{{.MessageName}}] {
	return getIterator(ctx, r.runner, r.placeholder, opts...)
}

func getIterator(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) generics.IterWithErr[{{.MessageName}}] {
	return func(yield func({{.MessageName}}, error) bool) {
		pageSize := 100
		offset := 0

		f := Filter{}
		for i := 0; i < len(opts); i++ {
			opts[i](&f)
		}

		if f.limit != nil && *f.limit > 0 {
			pageSize = *f.limit
		}

		for {
			pageOpts := make([]FilterOpt, 0, len(opts)+2)
			pageOpts = append(pageOpts, opts...)
			pageOpts = append(pageOpts, WithLimit(pageSize))
			pageOpts = append(pageOpts, WithOffset(offset))

			{{.MessageName | lower}}s, err := getMany(ctx, run, placeholder, pageOpts...)
			if err != nil {
				yield({{.MessageName}}{}, err)
				return
			}

			if len({{.MessageName | lower}}s) == 0 {
				break
			}

			for _, {{.MessageName | lower}} := range {{.MessageName | lower}}s {
				if !yield({{.MessageName | lower}}, nil) {
					return
				}
			}

			if len({{.MessageName | lower}}s) < pageSize {
				break
			}

			offset += pageSize
		}
	}
}
