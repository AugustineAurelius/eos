//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

import (
	"context"
	"fmt"
    
	common "{{.CommonPath}}"
	sq "github.com/Masterminds/squirrel"
)


func (r *CommandRepository) Count(ctx context.Context,  opts ...FilterOpt) (int, error) {
	return count(ctx, r.db, opts...)
}

func (r *QueryRepository) Count(ctx context.Context,  opts ...FilterOpt) (int, error) {
	return count(ctx, r.db, opts...)
}

func count(ctx context.Context, run common.Querier, opts ...FilterOpt) (int, error) {
    b := sq.Select("COUNT (id)").From(Table{{.MessageName}}).PlaceholderFormat(sq.Question)
    
    f := &Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](f)
	}
	b = ApplyWhere(b, *f)

    query, args := 	b.MustSql()

    var count int
    err := run.QueryRow(ctx, query,args...).Scan(&count)
    if err != nil {
        return 0, fmt.Errorf("failed to count query %s with args %v error = %w" , query, args, err)
    }

    return count, nil
}