// Code generated by eos wrapper generator. DO NOT EDIT.

package {{.PackageName}}

import (
	{{- if or .Tracing .OtelMetrics .Prometheus}}
	"context"
	{{- end}}
	{{- if or .OtelMetrics .CircuitBreaker .Prometheus}}
	"errors"
	{{- end}}
	{{- if .Retry}}
	"math"
	"math/rand"
	{{- end}}
	{{- if .CircuitBreaker}}
	"sync"
	{{- end}}
	{{- if or .Logging .NewRelic .Timeout .Retry .CircuitBreaker .ContextLogging}}
	"time"
	{{- end}}

	{{- if or .Logging .ContextLogging}}
	"go.uber.org/zap"
	{{- end}}
	{{- if .Tracing}}
	"go.opentelemetry.io/otel/trace"
	{{- end}}
	{{- if .NewRelic}}
	"github.com/newrelic/go-agent/v3/integrations/logcontext-v2/nrzap"
	"github.com/newrelic/go-agent/v3/newrelic"
	{{- end}}
	{{- if .OtelMetrics}}
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/metric"
	{{- end}}
	{{- if .Prometheus}}
	"github.com/prometheus/client_golang/prometheus"
	{{- end}}
	{{- if .ContextLogging}}
	"github.com/AugustineAurelius/eos/pkg/generics"
	{{- end}}
)

// ===================== Interface & Core =====================

type {{.Name}}Interface interface {
	{{- range .Methods}}
	{{.Name}}{{.Signature}}
	{{- end}}
}

type {{.Name | firstToLower}}Core struct {
	impl *{{.Name}}
}

{{range .Methods}}
func (core *{{$.Name | firstToLower}}Core) {{.Name}}{{.Signature}} {
	return core.impl.{{.Name}}({{ join .Params  ","}})
}
{{end}}

// ===================== Constructor & Options =====================

// New{{.Name}}Middleware creates a new middleware chain with the given implementation
func New{{.Name}}Middleware(impl *{{.Name}}, opts ...{{.Name}}Option) {{.Name}}Interface {
	chain := {{.Name}}Interface(&{{.Name | firstToLower}}Core{impl})
	for _, opt := range opts {
		chain = opt(chain)
	}
	return chain
}

// {{.Name}}Option represents a middleware option function
type {{.Name}}Option func({{.Name}}Interface) {{.Name}}Interface
