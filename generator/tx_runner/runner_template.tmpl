//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}


import (
	"context"
	"errors"
	"fmt"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
)

type runner interface {
	Begin(ctx context.Context) (pgx.Tx, error)
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
	Query(ctx context.Context, sql string, optionsAndArgs ...interface{}) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, optionsAndArgs ...interface{}) pgx.Row
}

var TxKey = struct{}{}

type txRunner struct {
	db runner
}

func New(db runner) *txRunner {
	return &txRunner{db}
}

func (tr *txRunner) RunInTransaction(ctx context.Context, fn func(context.Context) error) error {
	tx, err := tr.db.Begin(ctx)
	if err != nil {
		return err
	}
	defer func() {
		if p := recover(); p != nil {
			fmt.Println("panic handled")
			if rollbackErr := tx.Rollback(ctx); rollbackErr != nil {
				// add logger here
				fmt.Println(rollbackErr)
			}	
		} else if err != nil {
			if rollbackErr := tx.Rollback(ctx); rollbackErr != nil {
				// add logger here
				fmt.Println(rollbackErr)
			}
		} else {
			if commitErr := tx.Commit(ctx); commitErr != nil {
				fmt.Println(commitErr)
			}
		}
	}()
	ctxWithTx := context.WithValue(ctx, TxKey, tx)
	err = fn(ctxWithTx)
	return err
}

func FromContex(ctx context.Context) (pgx.Tx, error) {
	tx, ok := ctx.Value(TxKey).(pgx.Tx)
	if !ok {
		return nil, errors.New("transaction not found in context")
	}
	return tx, nil
}

