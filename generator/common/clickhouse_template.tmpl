//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

import (
	"context"
	"database/sql"
	"errors"
	"time"

	"github.com/ClickHouse/clickhouse-go/v2"
	"go.uber.org/zap"
	{{if .IncludeTelemetry}}
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
    {{end}}
)

type ClickhouseConnectionProvider struct {
	Host      string
	Port      int
	Databasse string
	User      string
	Password  string
}

type ClickHouseQuerier struct {
	client *sql.DB
	{{ if .IncludeLogger }}
	logger logger
	{{end}}
	{{if .IncludeTelemetry}}
	telemetry tracer
	{{end}}
    {{if .IncludeMetrics}}
	queryCount      int64Counter
	execCount       int64Counter
	queryRowCounter int64Counter
	{{end}}
}

func NewClickhouse(cp ClickhouseConnectionProvider,
	{{if .IncludeLogger}}
	logger logger,
	{{end}}
	{{if .IncludeTelemetry}}
	telemetry tracer, 
	{{end}}
	{{if .IncludeMetrics}}
	metrics metricProvider,
	{{end}}
) (ClickHouseQuerier, error) {
	conn := clickhouse.OpenDB(&clickhouse.Options{
		Addr: []string{cp.Host},
		Auth: clickhouse.Auth{
			Database: cp.Databasse,
			Username: cp.User,
			Password: cp.Password,
		},
		Settings: clickhouse.Settings{
			"max_execution_time": 60,
		},
		DialTimeout: time.Second * 30,
		Compression: &clickhouse.Compression{
			Method: clickhouse.CompressionLZ4,
		},
		Debug:                true,
		BlockBufferSize:      10,
		MaxCompressionBuffer: 10240,
	})
	conn.SetMaxIdleConns(5)
	conn.SetMaxOpenConns(10)
	conn.SetConnMaxLifetime(time.Hour)

	{{if .IncludeMetrics}}
	queryCount, err := metrics.Int64Counter("queryCount")
	if err != nil {
		return ClickHouseQuerier{}, err
	}
	execCount, err := metrics.Int64Counter("execCount")
	if err != nil {
		return ClickHouseQuerier{}, err
	}
	queryRowCounter, err := metrics.Int64Counter("queryRowCounter")
	if err != nil {
		return ClickHouseQuerier{}, err 
	}
	{{end}}
	return ClickHouseQuerier{client: conn,
		{{if .IncludeLogger}}
		logger:          logger,
		{{end}}
		{{if .IncludeTelemetry}}
		telemetry:       telemetry,
		{{end}}
		{{if .IncludeMetrics}}
		queryCount:      queryCount,
		execCount:       execCount,
		queryRowCounter: queryRowCounter,
		{{end}}
}, nil
}


func (db *ClickHouseQuerier) QueryRow(ctx context.Context, query string, args ...any) row {
	{{ if .IncludeTelemetry }}
	ctx, span := db.telemetry.Start(ctx, "QueryRow",trace.WithAttributes(attribute.String("query", query), attribute.String("db_type", "Clickhouse")))
	defer span.End()
    {{end}}
	{{if .IncludeLogger}}
	start := time.Now()
	db.logger.Info("Executing QueryRow", zap.String("query", query))
	{{end}}
	row := db.client.QueryRowContext(ctx, query, args...)
	{{if .IncludeLogger}}
	duration := time.Since(start).Seconds()
	db.logger.Info("QueryRow succeeded", zap.Float64("duration", duration))
	{{end}}
	{{if .IncludeMetrics}}
	db.queryRowCounter.Add(ctx, 1)
	{{end}}
	return &ClickHouseRow{row}
}

func (db *ClickHouseQuerier) Query(ctx context.Context, query string, args ...any) (rows, error) {
	{{if .IncludeTelemetry}}
	ctx, span := db.telemetry.Start(ctx, "Query",trace.WithAttributes(attribute.String("query", query), attribute.String("db_type", "Clickhouse")))
	defer span.End()
    {{end}}
	{{if .IncludeLogger}}
    start := time.Now()
    db.logger.Info("Executing Query", zap.String("query", query))
	{{end}}
	rows, err := db.client.QueryContext(ctx, query, args...)
	if err != nil {
		{{if .IncludeTelemetry}}
		span.SetStatus(codes.Error, err.Error())
		span.RecordError(err)
        {{end}}
		{{if .IncludeLogger}}
        db.logger.Error("Query failed", zap.Error(err))
		{{end}}
		return nil, err
	}
	{{if .IncludeLogger}}
	duration := time.Since(start).Seconds()
    db.logger.Info("Query succeeded", zap.Float64("duration", duration))
	{{end}}
	{{if .IncludeMetrics}}
	db.queryCount.Add(ctx, 1)
    {{end}}
	return &ClickHouseRows{rows}, nil
}

func (db *ClickHouseQuerier) Exec(ctx context.Context, query string, args ...any) (result, error) {
	{{if .IncludeTelemetry}}
    ctx, span := db.telemetry.Start(ctx, "Exec",trace.WithAttributes(attribute.String("query", query), attribute.String("db_type", "Clickhouse")))
    defer span.End()
    {{end}}
	{{if .IncludeLogger}}
	start := time.Now()
    db.logger.Info("Executing Exec", zap.String("query", query))
	{{end}}
	res, err := db.client.ExecContext(ctx, query, args...)
	if err != nil {
		{{if .IncludeTelemetry}}
		span.SetStatus(codes.Error, err.Error())
		span.RecordError(err)
        {{end}}
		{{if .IncludeLogger}}
        db.logger.Error("Exec failed", zap.Error(err))
		{{end}}
		return nil, err
	}
	{{if .IncludeLogger}}
    duration := time.Since(start).Seconds()
    db.logger.Info("Exec succeeded", zap.Float64("duration", duration))
	{{end}}
	{{if .IncludeMetrics}}
	db.execCount.Add(ctx, 1)
    {{end}}
	return &ClickHouseResult{res}, nil
}

type ClickHouseRows struct {
	rows
}

func (r *ClickHouseRows) Err() error {
	return r.rows.Err()
}

func (r *ClickHouseRows) Next() bool {
	return r.rows.Next()
}

func (r *ClickHouseRows) Close() error {
	return r.rows.Close()
}

func (r *ClickHouseRows) Scan(dest ...any) error {
	return r.rows.Scan(dest...)
}

type ClickHouseRow struct {
	row
}

func (r *ClickHouseRow) Scan(dest ...any) error {
	return r.row.Scan(dest...)
}

type ClickHouseResult struct {
	result
}

func (r *ClickHouseResult) RowsAffected() (int64, error) {
	return r.result.RowsAffected()
}

type ClickHouseBegginer struct {
	*ClickHouseQuerier
}

func (b *ClickHouseBegginer) Begin(ctx context.Context) (Tx, error) {
	return &ClickHouseTx{}, errors.New("not supported")
}

type ClickHouseTx struct {
	*ClickHouseQuerier
}

func (t *ClickHouseTx) Commit(ctx context.Context) error {
	return errors.New("not supported")

}

func (t *ClickHouseTx) Rollback(ctx context.Context) error {
	return errors.New("not supported")
}

