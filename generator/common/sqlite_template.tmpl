//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

import (
    "context"
    "database/sql"

	_ "github.com/mattn/go-sqlite3"
)

type SqliteConnectionProvider struct {
    URL string
}

func (s *SqliteConnectionProvider) GetConnectionURL() string {
    return s.URL
}

type SqliteDB struct {
    db *sql.DB
}

func NewSqlite(ctx context.Context, provider ConnectionProvider) (SqliteDB, error){
    url := provider.GetConnectionURL()
    db, err := sql.Open("sqlite3", url)
    if err != nil {
        return SqliteDB{}, err
    }
    return SqliteDB{db}, nil
}

func (s *SqliteDB) Close() error {
    return s.db.Close()
}

func NewSqliteInMemory(ctx context.Context) (SqliteDB, error){
    db, err := sql.Open("sqlite3", ":memory:")
    if err != nil {
        return SqliteDB{}, err
    }
    return SqliteDB{db}, nil
}

func (s *SqliteDB) Query(ctx context.Context, query string, args ...any) (rows, error) {
    rows, err := s.db.QueryContext(ctx, query, args...)
    if err != nil {
        return nil, err
    }
    return &SqliteRows{rows}, nil
}

func (s *SqliteDB) QueryRow(ctx context.Context, query string, args ...any) row {
    return s.db.QueryRowContext(ctx, query, args...)
}

func (s *SqliteDB) Exec(ctx context.Context, query string, args ...any) (result, error) {
    return s.db.ExecContext(ctx, query, args...)
}

func (s *SqliteDB) BeginTransaction(ctx context.Context) (Tx, error) {
    tx, err := s.db.BeginTx(ctx, &sql.TxOptions{})
    if err != nil {
        return nil, err
    }
    return &SqliteTx{tx}, nil
}

type SqliteRows struct {
    *sql.Rows
}

func (s *SqliteRows) Next() bool {
    return s.Rows.Next()
}

func (s *SqliteRows) Scan(dest ...any) error {
    return s.Rows.Scan(dest...)
}

func (s *SqliteRows) Close() error {
    return s.Rows.Close()
}

func (s *SqliteRows) Err() error {
    return s.Rows.Err()
}

type SqliteTx struct {
	*sql.Tx
}

func (s *SqliteTx) Query(ctx context.Context, query string, args ...any) (rows, error) {
	rows, err := s.Tx.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	return &SqliteRows{rows}, nil
}

func (s *SqliteTx) QueryRow(ctx context.Context, query string, args ...any) row {
	return s.Tx.QueryRowContext(ctx, query, args...)
}

func (s *SqliteTx) Exec(ctx context.Context, query string, args ...any) (result, error) {
	return s.Tx.ExecContext(ctx, query, args...)
}

func (s *SqliteTx) Commit(ctx context.Context) error {
	return s.Tx.Commit()
}

func (s *SqliteTx) Rollback(ctx context.Context) error {
	return s.Tx.Rollback()
}
