//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/gocql/gocql"
	"github.com/google/uuid"
	"go.uber.org/zap"
	{{if .IncludeMetrics}}
	"go.opentelemetry.io/otel/metric"
	{{end}}
	{{if .IncludeTelemetry}}
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
    {{end}}
)

type {{.DatabaseName}}ConnectionProvider struct {
	Hosts    []string
	Port     int
	Keyspace string
	User     string
	Password string
}

func (cp *{{.DatabaseName}}ConnectionProvider) GetConnectionURL() string {
	return fmt.Sprintf("Contact Points: %v, Port: %d, Keyspace: %s", cp.Hosts, cp.Port, cp.Keyspace)
}

type {{.DatabaseName}}Database struct {
	session *gocql.Session
	{{ if .IncludeLogger }}
	logger logger
	{{end}}
	{{if .IncludeTelemetry}}
	telemetry tracer
	{{end}}
    {{if .IncludeMetrics}}
	queryCount      int64Counter
	execCount       int64Counter
	queryRowCounter int64Counter
	{{end}}
}

func New{{.DatabaseName}}Database(cp CassandraConnectionProvider,
	{{if .IncludeLogger}}
	logger logger,
	{{end}}
	{{if .IncludeTelemetry}}
	telemetry tracer, 
	{{end}}
	{{if .IncludeMetrics}}
	metrics metricProvider,
	{{end}}
) ({{.DatabaseName}}Database, error) {
	cluster := gocql.NewCluster(cp.Hosts...)
	cluster.RetryPolicy = &gocql.SimpleRetryPolicy{
		NumRetries: 3,
	}
	cluster.Consistency = gocql.Quorum
	cluster.Authenticator = gocql.PasswordAuthenticator{
		Username: cp.User,
		Password: cp.Password,
	}
	cluster.Port = cp.Port
	cluster.Keyspace = cp.Keyspace
	session, err := cluster.CreateSession()
	if err != nil {
		return {{.DatabaseName}}Database{}, err
	}

	{{if .IncludeMetrics}}
	queryCount, err := metrics.Int64Counter("queryCount",metric.WithDescription("{{.DatabaseName}}"))
	if err != nil {
		return {{.DatabaseName}}Database{}, err
	}
	execCount, err := metrics.Int64Counter("execCount",metric.WithDescription("{{.DatabaseName}}"))
	if err != nil {
		return {{.DatabaseName}}Database{}, err
	}
	queryRowCounter, err := metrics.Int64Counter("queryRowCounter",metric.WithDescription("{{.DatabaseName}}"))
	if err != nil {
		return {{.DatabaseName}}Database{}, err
	}	
	{{end}}
	return {{.DatabaseName}}Database{
		session: session,
		{{if .IncludeLogger}}
		logger:          logger,
		{{end}}
		{{if .IncludeTelemetry}}
		telemetry:       telemetry,
		{{end}}
		{{if .IncludeMetrics}}
		queryCount:      queryCount,
		execCount:       execCount,
		queryRowCounter: queryRowCounter,
		{{end}}
	}, nil
}

func (db *{{.DatabaseName}}Database) Close() error {
	db.session.Close()
	return nil
}

func (db *{{.DatabaseName}}Database) QueryRow(ctx context.Context, query string, args ...any) row {
	{{ if .IncludeTelemetry }}
	ctx, span := db.telemetry.Start(ctx, "QueryRow",trace.WithAttributes(attribute.String("query", query), attribute.String("db_type", "{{.DatabaseName}}")))
	defer span.End()
    {{end}}
	{{if .IncludeLogger}}
	start := time.Now()
	db.logger.Info("Executing QueryRow", zap.String("query", query))
	{{end}}
	r := db.session.Query(query, ConvertArgs(args...)...).
		WithContext(context.Background())
	{{if .IncludeLogger}}
	duration := time.Since(start).Seconds()
	db.logger.Info("QueryRow succeeded", zap.Float64("duration", duration))
	{{end}}
	{{if .IncludeMetrics}}
	db.queryRowCounter.Add(ctx, 1)
	{{end}}
	return &{{.DatabaseName}}Row{
		Row: r,
	}
}

func (db *{{.DatabaseName}}Database) Query(ctx context.Context, query string, args ...any) (rows, error) {
	{{if .IncludeTelemetry}}
	ctx, span := db.telemetry.Start(ctx, "Query",trace.WithAttributes(attribute.String("query", query), attribute.String("db_type", "{{.DatabaseName}}")))
	defer span.End()
    {{end}}
	{{if .IncludeLogger}}
    start := time.Now()
    db.logger.Info("Executing Query", zap.String("query", query))
	{{end}}
	iter := db.session.Query(query, ConvertArgs(args...)...).WithContext(ctx).Iter()
	{{if .IncludeLogger}}
	duration := time.Since(start).Seconds()
    db.logger.Info("Query succeeded", zap.Float64("duration", duration))
	{{end}}
	{{if .IncludeMetrics}}
	db.queryCount.Add(ctx, 1)
    {{end}}
	return &{{.DatabaseName}}Rows{iter, iter.Scanner()}, nil
}

func (db *{{.DatabaseName}}Database) Exec(ctx context.Context, query string, args ...any) (result, error) {
	 {{if .IncludeTelemetry}}
    ctx, span := db.telemetry.Start(ctx, "Exec",trace.WithAttributes(attribute.String("query", query), attribute.String("db_type", "{{.DatabaseName}}")))
    defer span.End()
    {{end}}
	{{if .IncludeLogger}}
	start := time.Now()
    db.logger.Info("Executing Exec", zap.String("query", query))
	{{end}}
	err := db.session.Query(query, ConvertArgs(args...)...).
		WithContext(context.Background()).Exec()
    if err != nil {
        {{if .IncludeTelemetry}}
		span.SetStatus(codes.Error, err.Error())
		span.RecordError(err)
        {{end}}
		{{if .IncludeLogger}}
        db.logger.Error("Exec failed", zap.Error(err))
		{{end}}
		return nil, err
    } 
	{{if .IncludeLogger}}
    duration := time.Since(start).Seconds()
    db.logger.Info("Exec succeeded", zap.Float64("duration", duration))
	{{end}}
	{{if .IncludeMetrics}}
	db.execCount.Add(ctx, 1)
    {{end}}
	return &{{.DatabaseName}}Result{}, err
}

func (db *{{.DatabaseName}}Database) Begin(ctx context.Context) (Tx, error) {
	return nil, errors.New("Transactions not supported in {{.DatabaseName}}")
}

type {{.DatabaseName}}Rows struct {
	Iter    *gocql.Iter
	Scanner gocql.Scanner
}

func (r *{{.DatabaseName}}Rows) Close() error {
	return r.Iter.Close()
}

func (r *{{.DatabaseName}}Rows) Err() error {
	return r.Scanner.Err()
}

func (r *{{.DatabaseName}}Rows) Next() bool {
	return r.Scanner.Next()
}

func (r *{{.DatabaseName}}Rows) Scan(dest ...any) error {
	return r.Scanner.Scan(dest...)
}

type {{.DatabaseName}}Row struct {
	Row *gocql.Query
}

func (r *{{.DatabaseName}}Row) Scan(dest ...any) error {
	return r.Row.Scan(dest...)
}

type {{.DatabaseName}}Result struct{}

func (r *{{.DatabaseName}}Result) RowsAffected() (int64, error) {
	return 0, errors.New("RowsAffected not supported in {{.DatabaseName}}")
}

type {{.DatabaseName}}Tx struct{}

func (tx *{{.DatabaseName}}Tx) Query(ctx context.Context, query string, args ...any) (rows, error) {
	return nil, errors.New("Transactions not supported in {{.DatabaseName}}")
}

func (tx *{{.DatabaseName}}Tx) QueryRow(ctx context.Context, query string, args ...any) row {
	return &{{.DatabaseName}}Row{}
}

func (tx *{{.DatabaseName}}Tx) Exec(ctx context.Context, query string, args ...any) (result, error) {
	return nil, errors.New("Transactions not supported in {{.DatabaseName}}")
}

func (tx *{{.DatabaseName}}Tx) Commit(ctx context.Context) error {
	return errors.New("Transactions not supported in {{.DatabaseName}}")
}

func (tx *{{.DatabaseName}}Tx) Rollback(ctx context.Context) error {
	return errors.New("Transactions not supported in {{.DatabaseName}}")
}

func ConvertArgs(args ...any) []any {
	for i := 0; i < len(args); i++ {
		switch v := args[i].(type) {
		case uuid.UUID:
			args[i] = ConvertUUID(v)
		default:
			continue
		}
	}

	return args
}

func ConvertUUID(u uuid.UUID) gocql.UUID {
	var g gocql.UUID
	copy(g[:], u[:])
	return g
}

