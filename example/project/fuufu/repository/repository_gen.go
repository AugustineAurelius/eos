// Code generated by generator, DO NOT EDIT.
package repository

import (
	"time"

	common "github.com/AugustineAurelius/fuufu/pkg/common"
	sq "github.com/Masterminds/squirrel"
	"github.com/google/uuid"
)

type CommandRepository struct {
	db common.Querier
}

type QueryRepository struct {
	db common.Querier
}

func NewCommand(db common.Querier) *CommandRepository {
	return &CommandRepository{
		db: db,
	}
}

func NewQuery(db common.Querier) *QueryRepository {
	return &QueryRepository{
		db: db,
	}
}

// TaskFiler represents the Task filter.
type Filter struct {
	id                     *uuid.UUID
	notid                  *uuid.UUID
	gtid                   *uuid.UUID
	ltid                   *uuid.UUID
	gteqid                 *uuid.UUID
	lteqid                 *uuid.UUID
	ids                    []uuid.UUID
	idorderByAsc           *string
	idorderByDesc          *string
	name                   *string
	notname                *string
	gtname                 *string
	ltname                 *string
	gteqname               *string
	lteqname               *string
	names                  []string
	nameorderByAsc         *string
	nameorderByDesc        *string
	description            **string
	notdescription         **string
	gtdescription          **string
	ltdescription          **string
	gteqdescription        **string
	lteqdescription        **string
	descriptions           []*string
	descriptionorderByAsc  *string
	descriptionorderByDesc *string
	createdby              *string
	notcreatedby           *string
	gtcreatedby            *string
	ltcreatedby            *string
	gteqcreatedby          *string
	lteqcreatedby          *string
	createdbys             []string
	createdbyorderByAsc    *string
	createdbyorderByDesc   *string
	doer                   *string
	notdoer                *string
	gtdoer                 *string
	ltdoer                 *string
	gteqdoer               *string
	lteqdoer               *string
	doers                  []string
	doerorderByAsc         *string
	doerorderByDesc        *string
	done                   *bool
	notdone                *bool
	gtdone                 *bool
	ltdone                 *bool
	gteqdone               *bool
	lteqdone               *bool
	dones                  []bool
	doneorderByAsc         *string
	doneorderByDesc        *string
	repeatable             *bool
	notrepeatable          *bool
	gtrepeatable           *bool
	ltrepeatable           *bool
	gteqrepeatable         *bool
	lteqrepeatable         *bool
	repeatables            []bool
	repeatableorderByAsc   *string
	repeatableorderByDesc  *string
	repeatafter            **int
	notrepeatafter         **int
	gtrepeatafter          **int
	ltrepeatafter          **int
	gteqrepeatafter        **int
	lteqrepeatafter        **int
	repeatafters           []*int
	repeatafterorderByAsc  *string
	repeatafterorderByDesc *string
	dobefore               **time.Time
	notdobefore            **time.Time
	gtdobefore             **time.Time
	ltdobefore             **time.Time
	gteqdobefore           **time.Time
	lteqdobefore           **time.Time
	dobefores              []*time.Time
	dobeforeorderByAsc     *string
	dobeforeorderByDesc    *string
	createdat              *time.Time
	notcreatedat           *time.Time
	gtcreatedat            *time.Time
	ltcreatedat            *time.Time
	gteqcreatedat          *time.Time
	lteqcreatedat          *time.Time
	createdats             []time.Time
	createdatorderByAsc    *string
	createdatorderByDesc   *string
	updatedat              **time.Time
	notupdatedat           **time.Time
	gtupdatedat            **time.Time
	ltupdatedat            **time.Time
	gtequpdatedat          **time.Time
	ltequpdatedat          **time.Time
	updatedats             []*time.Time
	updatedatorderByAsc    *string
	updatedatorderByDesc   *string
	limit                  *int
	offset                 *int
}

type FilterOpt func(f *Filter)

func NewFilter(opts ...FilterOpt) Filter {
	f := &Filter{}
	for _, opt := range opts {
		opt(f)
	}
	return *f
}

func WithLimit(limit int) FilterOpt {
	return func(f *Filter) {
		f.limit = &limit
	}
}
func WithOffset(offset int) FilterOpt {
	return func(f *Filter) {
		f.offset = &offset
	}
}
func WithID(id uuid.UUID) FilterOpt {
	return func(f *Filter) {
		f.id = &id
	}
}
func WithIDNot(id uuid.UUID) FilterOpt {
	return func(f *Filter) {
		f.notid = &id
	}
}
func WithIDMoreThen(id uuid.UUID) FilterOpt {
	return func(f *Filter) {
		f.gtid = &id
	}
}
func WithIDLowerThen(id uuid.UUID) FilterOpt {
	return func(f *Filter) {
		f.ltid = &id
	}
}
func WithIDMoreOrEqualThen(id uuid.UUID) FilterOpt {
	return func(f *Filter) {
		f.gteqid = &id
	}
}
func WithIDLowerOrEqualThen(id uuid.UUID) FilterOpt {
	return func(f *Filter) {
		f.lteqid = &id
	}
}
func WithIDs(ids ...uuid.UUID) FilterOpt {
	return func(f *Filter) {
		f.ids = append(f.ids, ids...)
	}
}

func WithOrderByIDAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "id ASC"
		f.idorderByAsc = &column
	}
}
func WithOrderByIDDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "id DESC"
		f.idorderByDesc = &column
	}
}
func WithName(name string) FilterOpt {
	return func(f *Filter) {
		f.name = &name
	}
}
func WithNameNot(name string) FilterOpt {
	return func(f *Filter) {
		f.notname = &name
	}
}
func WithNameMoreThen(name string) FilterOpt {
	return func(f *Filter) {
		f.gtname = &name
	}
}
func WithNameLowerThen(name string) FilterOpt {
	return func(f *Filter) {
		f.ltname = &name
	}
}
func WithNameMoreOrEqualThen(name string) FilterOpt {
	return func(f *Filter) {
		f.gteqname = &name
	}
}
func WithNameLowerOrEqualThen(name string) FilterOpt {
	return func(f *Filter) {
		f.lteqname = &name
	}
}
func WithNames(names ...string) FilterOpt {
	return func(f *Filter) {
		f.names = append(f.names, names...)
	}
}

func WithOrderByNameAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "name ASC"
		f.nameorderByAsc = &column
	}
}
func WithOrderByNameDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "name DESC"
		f.nameorderByDesc = &column
	}
}
func WithDescription(description *string) FilterOpt {
	return func(f *Filter) {
		f.description = &description
	}
}
func WithDescriptionNot(description *string) FilterOpt {
	return func(f *Filter) {
		f.notdescription = &description
	}
}
func WithDescriptionMoreThen(description *string) FilterOpt {
	return func(f *Filter) {
		f.gtdescription = &description
	}
}
func WithDescriptionLowerThen(description *string) FilterOpt {
	return func(f *Filter) {
		f.ltdescription = &description
	}
}
func WithDescriptionMoreOrEqualThen(description *string) FilterOpt {
	return func(f *Filter) {
		f.gteqdescription = &description
	}
}
func WithDescriptionLowerOrEqualThen(description *string) FilterOpt {
	return func(f *Filter) {
		f.lteqdescription = &description
	}
}
func WithDescriptions(descriptions ...*string) FilterOpt {
	return func(f *Filter) {
		f.descriptions = append(f.descriptions, descriptions...)
	}
}

func WithOrderByDescriptionAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "description ASC"
		f.descriptionorderByAsc = &column
	}
}
func WithOrderByDescriptionDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "description DESC"
		f.descriptionorderByDesc = &column
	}
}
func WithCreatedBy(createdby string) FilterOpt {
	return func(f *Filter) {
		f.createdby = &createdby
	}
}
func WithCreatedByNot(createdby string) FilterOpt {
	return func(f *Filter) {
		f.notcreatedby = &createdby
	}
}
func WithCreatedByMoreThen(createdby string) FilterOpt {
	return func(f *Filter) {
		f.gtcreatedby = &createdby
	}
}
func WithCreatedByLowerThen(createdby string) FilterOpt {
	return func(f *Filter) {
		f.ltcreatedby = &createdby
	}
}
func WithCreatedByMoreOrEqualThen(createdby string) FilterOpt {
	return func(f *Filter) {
		f.gteqcreatedby = &createdby
	}
}
func WithCreatedByLowerOrEqualThen(createdby string) FilterOpt {
	return func(f *Filter) {
		f.lteqcreatedby = &createdby
	}
}
func WithCreatedBys(createdbys ...string) FilterOpt {
	return func(f *Filter) {
		f.createdbys = append(f.createdbys, createdbys...)
	}
}

func WithOrderByCreatedByAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "created_by ASC"
		f.createdbyorderByAsc = &column
	}
}
func WithOrderByCreatedByDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "created_by DESC"
		f.createdbyorderByDesc = &column
	}
}
func WithDoer(doer string) FilterOpt {
	return func(f *Filter) {
		f.doer = &doer
	}
}
func WithDoerNot(doer string) FilterOpt {
	return func(f *Filter) {
		f.notdoer = &doer
	}
}
func WithDoerMoreThen(doer string) FilterOpt {
	return func(f *Filter) {
		f.gtdoer = &doer
	}
}
func WithDoerLowerThen(doer string) FilterOpt {
	return func(f *Filter) {
		f.ltdoer = &doer
	}
}
func WithDoerMoreOrEqualThen(doer string) FilterOpt {
	return func(f *Filter) {
		f.gteqdoer = &doer
	}
}
func WithDoerLowerOrEqualThen(doer string) FilterOpt {
	return func(f *Filter) {
		f.lteqdoer = &doer
	}
}
func WithDoers(doers ...string) FilterOpt {
	return func(f *Filter) {
		f.doers = append(f.doers, doers...)
	}
}

func WithOrderByDoerAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "doer ASC"
		f.doerorderByAsc = &column
	}
}
func WithOrderByDoerDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "doer DESC"
		f.doerorderByDesc = &column
	}
}
func WithDone(done bool) FilterOpt {
	return func(f *Filter) {
		f.done = &done
	}
}
func WithDoneNot(done bool) FilterOpt {
	return func(f *Filter) {
		f.notdone = &done
	}
}
func WithDoneMoreThen(done bool) FilterOpt {
	return func(f *Filter) {
		f.gtdone = &done
	}
}
func WithDoneLowerThen(done bool) FilterOpt {
	return func(f *Filter) {
		f.ltdone = &done
	}
}
func WithDoneMoreOrEqualThen(done bool) FilterOpt {
	return func(f *Filter) {
		f.gteqdone = &done
	}
}
func WithDoneLowerOrEqualThen(done bool) FilterOpt {
	return func(f *Filter) {
		f.lteqdone = &done
	}
}
func WithDones(dones ...bool) FilterOpt {
	return func(f *Filter) {
		f.dones = append(f.dones, dones...)
	}
}

func WithOrderByDoneAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "done ASC"
		f.doneorderByAsc = &column
	}
}
func WithOrderByDoneDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "done DESC"
		f.doneorderByDesc = &column
	}
}
func WithRepeatable(repeatable bool) FilterOpt {
	return func(f *Filter) {
		f.repeatable = &repeatable
	}
}
func WithRepeatableNot(repeatable bool) FilterOpt {
	return func(f *Filter) {
		f.notrepeatable = &repeatable
	}
}
func WithRepeatableMoreThen(repeatable bool) FilterOpt {
	return func(f *Filter) {
		f.gtrepeatable = &repeatable
	}
}
func WithRepeatableLowerThen(repeatable bool) FilterOpt {
	return func(f *Filter) {
		f.ltrepeatable = &repeatable
	}
}
func WithRepeatableMoreOrEqualThen(repeatable bool) FilterOpt {
	return func(f *Filter) {
		f.gteqrepeatable = &repeatable
	}
}
func WithRepeatableLowerOrEqualThen(repeatable bool) FilterOpt {
	return func(f *Filter) {
		f.lteqrepeatable = &repeatable
	}
}
func WithRepeatables(repeatables ...bool) FilterOpt {
	return func(f *Filter) {
		f.repeatables = append(f.repeatables, repeatables...)
	}
}

func WithOrderByRepeatableAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "repeatable ASC"
		f.repeatableorderByAsc = &column
	}
}
func WithOrderByRepeatableDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "repeatable DESC"
		f.repeatableorderByDesc = &column
	}
}
func WithRepeatAfter(repeatafter *int) FilterOpt {
	return func(f *Filter) {
		f.repeatafter = &repeatafter
	}
}
func WithRepeatAfterNot(repeatafter *int) FilterOpt {
	return func(f *Filter) {
		f.notrepeatafter = &repeatafter
	}
}
func WithRepeatAfterMoreThen(repeatafter *int) FilterOpt {
	return func(f *Filter) {
		f.gtrepeatafter = &repeatafter
	}
}
func WithRepeatAfterLowerThen(repeatafter *int) FilterOpt {
	return func(f *Filter) {
		f.ltrepeatafter = &repeatafter
	}
}
func WithRepeatAfterMoreOrEqualThen(repeatafter *int) FilterOpt {
	return func(f *Filter) {
		f.gteqrepeatafter = &repeatafter
	}
}
func WithRepeatAfterLowerOrEqualThen(repeatafter *int) FilterOpt {
	return func(f *Filter) {
		f.lteqrepeatafter = &repeatafter
	}
}
func WithRepeatAfters(repeatafters ...*int) FilterOpt {
	return func(f *Filter) {
		f.repeatafters = append(f.repeatafters, repeatafters...)
	}
}

func WithOrderByRepeatAfterAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "repeat_after ASC"
		f.repeatafterorderByAsc = &column
	}
}
func WithOrderByRepeatAfterDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "repeat_after DESC"
		f.repeatafterorderByDesc = &column
	}
}
func WithDoBefore(dobefore *time.Time) FilterOpt {
	return func(f *Filter) {
		f.dobefore = &dobefore
	}
}
func WithDoBeforeNot(dobefore *time.Time) FilterOpt {
	return func(f *Filter) {
		f.notdobefore = &dobefore
	}
}
func WithDoBeforeMoreThen(dobefore *time.Time) FilterOpt {
	return func(f *Filter) {
		f.gtdobefore = &dobefore
	}
}
func WithDoBeforeLowerThen(dobefore *time.Time) FilterOpt {
	return func(f *Filter) {
		f.ltdobefore = &dobefore
	}
}
func WithDoBeforeMoreOrEqualThen(dobefore *time.Time) FilterOpt {
	return func(f *Filter) {
		f.gteqdobefore = &dobefore
	}
}
func WithDoBeforeLowerOrEqualThen(dobefore *time.Time) FilterOpt {
	return func(f *Filter) {
		f.lteqdobefore = &dobefore
	}
}
func WithDoBefores(dobefores ...*time.Time) FilterOpt {
	return func(f *Filter) {
		f.dobefores = append(f.dobefores, dobefores...)
	}
}

func WithOrderByDoBeforeAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "do_before ASC"
		f.dobeforeorderByAsc = &column
	}
}
func WithOrderByDoBeforeDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "do_before DESC"
		f.dobeforeorderByDesc = &column
	}
}
func WithCreatedAt(createdat time.Time) FilterOpt {
	return func(f *Filter) {
		f.createdat = &createdat
	}
}
func WithCreatedAtNot(createdat time.Time) FilterOpt {
	return func(f *Filter) {
		f.notcreatedat = &createdat
	}
}
func WithCreatedAtMoreThen(createdat time.Time) FilterOpt {
	return func(f *Filter) {
		f.gtcreatedat = &createdat
	}
}
func WithCreatedAtLowerThen(createdat time.Time) FilterOpt {
	return func(f *Filter) {
		f.ltcreatedat = &createdat
	}
}
func WithCreatedAtMoreOrEqualThen(createdat time.Time) FilterOpt {
	return func(f *Filter) {
		f.gteqcreatedat = &createdat
	}
}
func WithCreatedAtLowerOrEqualThen(createdat time.Time) FilterOpt {
	return func(f *Filter) {
		f.lteqcreatedat = &createdat
	}
}
func WithCreatedAts(createdats ...time.Time) FilterOpt {
	return func(f *Filter) {
		f.createdats = append(f.createdats, createdats...)
	}
}

func WithOrderByCreatedAtAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "created_at ASC"
		f.createdatorderByAsc = &column
	}
}
func WithOrderByCreatedAtDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "created_at DESC"
		f.createdatorderByDesc = &column
	}
}
func WithUpdatedAt(updatedat *time.Time) FilterOpt {
	return func(f *Filter) {
		f.updatedat = &updatedat
	}
}
func WithUpdatedAtNot(updatedat *time.Time) FilterOpt {
	return func(f *Filter) {
		f.notupdatedat = &updatedat
	}
}
func WithUpdatedAtMoreThen(updatedat *time.Time) FilterOpt {
	return func(f *Filter) {
		f.gtupdatedat = &updatedat
	}
}
func WithUpdatedAtLowerThen(updatedat *time.Time) FilterOpt {
	return func(f *Filter) {
		f.ltupdatedat = &updatedat
	}
}
func WithUpdatedAtMoreOrEqualThen(updatedat *time.Time) FilterOpt {
	return func(f *Filter) {
		f.gtequpdatedat = &updatedat
	}
}
func WithUpdatedAtLowerOrEqualThen(updatedat *time.Time) FilterOpt {
	return func(f *Filter) {
		f.ltequpdatedat = &updatedat
	}
}
func WithUpdatedAts(updatedats ...*time.Time) FilterOpt {
	return func(f *Filter) {
		f.updatedats = append(f.updatedats, updatedats...)
	}
}

func WithOrderByUpdatedAtAsc() FilterOpt {
	return func(f *Filter) {
		var column string = "updated_at ASC"
		f.updatedatorderByAsc = &column
	}
}
func WithOrderByUpdatedAtDesc() FilterOpt {
	return func(f *Filter) {
		var column string = "updated_at DESC"
		f.updatedatorderByDesc = &column
	}
}

func ApplyWhere[B interface {
	Where(pred interface{}, args ...interface{}) B
	Limit(limit uint64) B
	Offset(limit uint64) B
	OrderBy(orderBys ...string) B
}](b B, f Filter) B {
	if f.id != nil {
		b = b.Where(sq.Eq{ColumnTaskID: *f.id})
	}
	if f.notid != nil {
		b = b.Where(sq.NotEq{ColumnTaskID: *f.notid})
	}
	if f.ltid != nil {
		b = b.Where(sq.Lt{ColumnTaskID: *f.ltid})
	}
	if f.gtid != nil {
		b = b.Where(sq.Gt{ColumnTaskID: *f.gtid})
	}
	if f.lteqid != nil {
		b = b.Where(sq.LtOrEq{ColumnTaskID: *f.lteqid})
	}
	if f.gteqid != nil {
		b = b.Where(sq.GtOrEq{ColumnTaskID: *f.gteqid})
	}
	if f.ids != nil {
		b = b.Where(sq.Eq{ColumnTaskID: f.ids})
	}
	if f.idorderByAsc != nil {
		b = b.OrderBy(*f.idorderByAsc)
	}
	if f.idorderByDesc != nil {
		b = b.OrderBy(*f.idorderByDesc)
	}
	if f.name != nil {
		b = b.Where(sq.Eq{ColumnTaskName: *f.name})
	}
	if f.notname != nil {
		b = b.Where(sq.NotEq{ColumnTaskName: *f.notname})
	}
	if f.ltname != nil {
		b = b.Where(sq.Lt{ColumnTaskName: *f.ltname})
	}
	if f.gtname != nil {
		b = b.Where(sq.Gt{ColumnTaskName: *f.gtname})
	}
	if f.lteqname != nil {
		b = b.Where(sq.LtOrEq{ColumnTaskName: *f.lteqname})
	}
	if f.gteqname != nil {
		b = b.Where(sq.GtOrEq{ColumnTaskName: *f.gteqname})
	}
	if f.names != nil {
		b = b.Where(sq.Eq{ColumnTaskName: f.names})
	}
	if f.nameorderByAsc != nil {
		b = b.OrderBy(*f.nameorderByAsc)
	}
	if f.nameorderByDesc != nil {
		b = b.OrderBy(*f.nameorderByDesc)
	}
	if f.description != nil {
		b = b.Where(sq.Eq{ColumnTaskDescription: *f.description})
	}
	if f.notdescription != nil {
		b = b.Where(sq.NotEq{ColumnTaskDescription: *f.notdescription})
	}
	if f.ltdescription != nil {
		b = b.Where(sq.Lt{ColumnTaskDescription: *f.ltdescription})
	}
	if f.gtdescription != nil {
		b = b.Where(sq.Gt{ColumnTaskDescription: *f.gtdescription})
	}
	if f.lteqdescription != nil {
		b = b.Where(sq.LtOrEq{ColumnTaskDescription: *f.lteqdescription})
	}
	if f.gteqdescription != nil {
		b = b.Where(sq.GtOrEq{ColumnTaskDescription: *f.gteqdescription})
	}
	if f.descriptions != nil {
		b = b.Where(sq.Eq{ColumnTaskDescription: f.descriptions})
	}
	if f.descriptionorderByAsc != nil {
		b = b.OrderBy(*f.descriptionorderByAsc)
	}
	if f.descriptionorderByDesc != nil {
		b = b.OrderBy(*f.descriptionorderByDesc)
	}
	if f.createdby != nil {
		b = b.Where(sq.Eq{ColumnTaskCreatedBy: *f.createdby})
	}
	if f.notcreatedby != nil {
		b = b.Where(sq.NotEq{ColumnTaskCreatedBy: *f.notcreatedby})
	}
	if f.ltcreatedby != nil {
		b = b.Where(sq.Lt{ColumnTaskCreatedBy: *f.ltcreatedby})
	}
	if f.gtcreatedby != nil {
		b = b.Where(sq.Gt{ColumnTaskCreatedBy: *f.gtcreatedby})
	}
	if f.lteqcreatedby != nil {
		b = b.Where(sq.LtOrEq{ColumnTaskCreatedBy: *f.lteqcreatedby})
	}
	if f.gteqcreatedby != nil {
		b = b.Where(sq.GtOrEq{ColumnTaskCreatedBy: *f.gteqcreatedby})
	}
	if f.createdbys != nil {
		b = b.Where(sq.Eq{ColumnTaskCreatedBy: f.createdbys})
	}
	if f.createdbyorderByAsc != nil {
		b = b.OrderBy(*f.createdbyorderByAsc)
	}
	if f.createdbyorderByDesc != nil {
		b = b.OrderBy(*f.createdbyorderByDesc)
	}
	if f.doer != nil {
		b = b.Where(sq.Eq{ColumnTaskDoer: *f.doer})
	}
	if f.notdoer != nil {
		b = b.Where(sq.NotEq{ColumnTaskDoer: *f.notdoer})
	}
	if f.ltdoer != nil {
		b = b.Where(sq.Lt{ColumnTaskDoer: *f.ltdoer})
	}
	if f.gtdoer != nil {
		b = b.Where(sq.Gt{ColumnTaskDoer: *f.gtdoer})
	}
	if f.lteqdoer != nil {
		b = b.Where(sq.LtOrEq{ColumnTaskDoer: *f.lteqdoer})
	}
	if f.gteqdoer != nil {
		b = b.Where(sq.GtOrEq{ColumnTaskDoer: *f.gteqdoer})
	}
	if f.doers != nil {
		b = b.Where(sq.Eq{ColumnTaskDoer: f.doers})
	}
	if f.doerorderByAsc != nil {
		b = b.OrderBy(*f.doerorderByAsc)
	}
	if f.doerorderByDesc != nil {
		b = b.OrderBy(*f.doerorderByDesc)
	}
	if f.done != nil {
		b = b.Where(sq.Eq{ColumnTaskDone: *f.done})
	}
	if f.notdone != nil {
		b = b.Where(sq.NotEq{ColumnTaskDone: *f.notdone})
	}
	if f.ltdone != nil {
		b = b.Where(sq.Lt{ColumnTaskDone: *f.ltdone})
	}
	if f.gtdone != nil {
		b = b.Where(sq.Gt{ColumnTaskDone: *f.gtdone})
	}
	if f.lteqdone != nil {
		b = b.Where(sq.LtOrEq{ColumnTaskDone: *f.lteqdone})
	}
	if f.gteqdone != nil {
		b = b.Where(sq.GtOrEq{ColumnTaskDone: *f.gteqdone})
	}
	if f.dones != nil {
		b = b.Where(sq.Eq{ColumnTaskDone: f.dones})
	}
	if f.doneorderByAsc != nil {
		b = b.OrderBy(*f.doneorderByAsc)
	}
	if f.doneorderByDesc != nil {
		b = b.OrderBy(*f.doneorderByDesc)
	}
	if f.repeatable != nil {
		b = b.Where(sq.Eq{ColumnTaskRepeatable: *f.repeatable})
	}
	if f.notrepeatable != nil {
		b = b.Where(sq.NotEq{ColumnTaskRepeatable: *f.notrepeatable})
	}
	if f.ltrepeatable != nil {
		b = b.Where(sq.Lt{ColumnTaskRepeatable: *f.ltrepeatable})
	}
	if f.gtrepeatable != nil {
		b = b.Where(sq.Gt{ColumnTaskRepeatable: *f.gtrepeatable})
	}
	if f.lteqrepeatable != nil {
		b = b.Where(sq.LtOrEq{ColumnTaskRepeatable: *f.lteqrepeatable})
	}
	if f.gteqrepeatable != nil {
		b = b.Where(sq.GtOrEq{ColumnTaskRepeatable: *f.gteqrepeatable})
	}
	if f.repeatables != nil {
		b = b.Where(sq.Eq{ColumnTaskRepeatable: f.repeatables})
	}
	if f.repeatableorderByAsc != nil {
		b = b.OrderBy(*f.repeatableorderByAsc)
	}
	if f.repeatableorderByDesc != nil {
		b = b.OrderBy(*f.repeatableorderByDesc)
	}
	if f.repeatafter != nil {
		b = b.Where(sq.Eq{ColumnTaskRepeatAfter: *f.repeatafter})
	}
	if f.notrepeatafter != nil {
		b = b.Where(sq.NotEq{ColumnTaskRepeatAfter: *f.notrepeatafter})
	}
	if f.ltrepeatafter != nil {
		b = b.Where(sq.Lt{ColumnTaskRepeatAfter: *f.ltrepeatafter})
	}
	if f.gtrepeatafter != nil {
		b = b.Where(sq.Gt{ColumnTaskRepeatAfter: *f.gtrepeatafter})
	}
	if f.lteqrepeatafter != nil {
		b = b.Where(sq.LtOrEq{ColumnTaskRepeatAfter: *f.lteqrepeatafter})
	}
	if f.gteqrepeatafter != nil {
		b = b.Where(sq.GtOrEq{ColumnTaskRepeatAfter: *f.gteqrepeatafter})
	}
	if f.repeatafters != nil {
		b = b.Where(sq.Eq{ColumnTaskRepeatAfter: f.repeatafters})
	}
	if f.repeatafterorderByAsc != nil {
		b = b.OrderBy(*f.repeatafterorderByAsc)
	}
	if f.repeatafterorderByDesc != nil {
		b = b.OrderBy(*f.repeatafterorderByDesc)
	}
	if f.dobefore != nil {
		b = b.Where(sq.Eq{ColumnTaskDoBefore: *f.dobefore})
	}
	if f.notdobefore != nil {
		b = b.Where(sq.NotEq{ColumnTaskDoBefore: *f.notdobefore})
	}
	if f.ltdobefore != nil {
		b = b.Where(sq.Lt{ColumnTaskDoBefore: *f.ltdobefore})
	}
	if f.gtdobefore != nil {
		b = b.Where(sq.Gt{ColumnTaskDoBefore: *f.gtdobefore})
	}
	if f.lteqdobefore != nil {
		b = b.Where(sq.LtOrEq{ColumnTaskDoBefore: *f.lteqdobefore})
	}
	if f.gteqdobefore != nil {
		b = b.Where(sq.GtOrEq{ColumnTaskDoBefore: *f.gteqdobefore})
	}
	if f.dobefores != nil {
		b = b.Where(sq.Eq{ColumnTaskDoBefore: f.dobefores})
	}
	if f.dobeforeorderByAsc != nil {
		b = b.OrderBy(*f.dobeforeorderByAsc)
	}
	if f.dobeforeorderByDesc != nil {
		b = b.OrderBy(*f.dobeforeorderByDesc)
	}
	if f.createdat != nil {
		b = b.Where(sq.Eq{ColumnTaskCreatedAt: *f.createdat})
	}
	if f.notcreatedat != nil {
		b = b.Where(sq.NotEq{ColumnTaskCreatedAt: *f.notcreatedat})
	}
	if f.ltcreatedat != nil {
		b = b.Where(sq.Lt{ColumnTaskCreatedAt: *f.ltcreatedat})
	}
	if f.gtcreatedat != nil {
		b = b.Where(sq.Gt{ColumnTaskCreatedAt: *f.gtcreatedat})
	}
	if f.lteqcreatedat != nil {
		b = b.Where(sq.LtOrEq{ColumnTaskCreatedAt: *f.lteqcreatedat})
	}
	if f.gteqcreatedat != nil {
		b = b.Where(sq.GtOrEq{ColumnTaskCreatedAt: *f.gteqcreatedat})
	}
	if f.createdats != nil {
		b = b.Where(sq.Eq{ColumnTaskCreatedAt: f.createdats})
	}
	if f.createdatorderByAsc != nil {
		b = b.OrderBy(*f.createdatorderByAsc)
	}
	if f.createdatorderByDesc != nil {
		b = b.OrderBy(*f.createdatorderByDesc)
	}
	if f.updatedat != nil {
		b = b.Where(sq.Eq{ColumnTaskUpdatedAt: *f.updatedat})
	}
	if f.notupdatedat != nil {
		b = b.Where(sq.NotEq{ColumnTaskUpdatedAt: *f.notupdatedat})
	}
	if f.ltupdatedat != nil {
		b = b.Where(sq.Lt{ColumnTaskUpdatedAt: *f.ltupdatedat})
	}
	if f.gtupdatedat != nil {
		b = b.Where(sq.Gt{ColumnTaskUpdatedAt: *f.gtupdatedat})
	}
	if f.ltequpdatedat != nil {
		b = b.Where(sq.LtOrEq{ColumnTaskUpdatedAt: *f.ltequpdatedat})
	}
	if f.gtequpdatedat != nil {
		b = b.Where(sq.GtOrEq{ColumnTaskUpdatedAt: *f.gtequpdatedat})
	}
	if f.updatedats != nil {
		b = b.Where(sq.Eq{ColumnTaskUpdatedAt: f.updatedats})
	}
	if f.updatedatorderByAsc != nil {
		b = b.OrderBy(*f.updatedatorderByAsc)
	}
	if f.updatedatorderByDesc != nil {
		b = b.OrderBy(*f.updatedatorderByDesc)
	}

	if f.limit != nil {
		b = b.Limit(uint64(*f.limit))
	}
	if f.offset != nil {
		b = b.Offset(uint64(*f.offset))
	}

	return b
}

type UpdateOpt func(u *Update)

// TaskUpdate represents the Task update struct.
type Update struct {
	id          *uuid.UUID
	name        *string
	description **string
	createdby   *string
	doer        *string
	done        *bool
	repeatable  *bool
	repeatafter **int
	dobefore    **time.Time
	createdat   *time.Time
	updatedat   **time.Time
}

func NewUpdate(opts ...UpdateOpt) Update {
	u := &Update{}
	for _, opt := range opts {
		opt(u)
	}
	return *u
}
func WithUpdateID(id uuid.UUID) UpdateOpt {
	return func(f *Update) {
		f.id = &id
	}
}
func WithUpdateName(name string) UpdateOpt {
	return func(f *Update) {
		f.name = &name
	}
}
func WithUpdateDescription(description *string) UpdateOpt {
	return func(f *Update) {
		f.description = &description
	}
}
func WithUpdateCreatedBy(createdby string) UpdateOpt {
	return func(f *Update) {
		f.createdby = &createdby
	}
}
func WithUpdateDoer(doer string) UpdateOpt {
	return func(f *Update) {
		f.doer = &doer
	}
}
func WithUpdateDone(done bool) UpdateOpt {
	return func(f *Update) {
		f.done = &done
	}
}
func WithUpdateRepeatable(repeatable bool) UpdateOpt {
	return func(f *Update) {
		f.repeatable = &repeatable
	}
}
func WithUpdateRepeatAfter(repeatafter *int) UpdateOpt {
	return func(f *Update) {
		f.repeatafter = &repeatafter
	}
}
func WithUpdateDoBefore(dobefore *time.Time) UpdateOpt {
	return func(f *Update) {
		f.dobefore = &dobefore
	}
}
func WithUpdateCreatedAt(createdat time.Time) UpdateOpt {
	return func(f *Update) {
		f.createdat = &createdat
	}
}
func WithUpdateUpdatedAt(updatedat *time.Time) UpdateOpt {
	return func(f *Update) {
		f.updatedat = &updatedat
	}
}

func ApplySet[B interface {
	Set(column string, value interface{}) B
}](b B, f Update) B {
	if f.id != nil {
		b = b.Set(ColumnTaskID, *f.id)
	}
	if f.name != nil {
		b = b.Set(ColumnTaskName, *f.name)
	}
	if f.description != nil {
		b = b.Set(ColumnTaskDescription, *f.description)
	}
	if f.createdby != nil {
		b = b.Set(ColumnTaskCreatedBy, *f.createdby)
	}
	if f.doer != nil {
		b = b.Set(ColumnTaskDoer, *f.doer)
	}
	if f.done != nil {
		b = b.Set(ColumnTaskDone, *f.done)
	}
	if f.repeatable != nil {
		b = b.Set(ColumnTaskRepeatable, *f.repeatable)
	}
	if f.repeatafter != nil {
		b = b.Set(ColumnTaskRepeatAfter, *f.repeatafter)
	}
	if f.dobefore != nil {
		b = b.Set(ColumnTaskDoBefore, *f.dobefore)
	}
	if f.createdat != nil {
		b = b.Set(ColumnTaskCreatedAt, *f.createdat)
	}
	if f.updatedat != nil {
		b = b.Set(ColumnTaskUpdatedAt, *f.updatedat)
	}

	return b
}
