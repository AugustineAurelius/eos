// Code generated by generator, DO NOT EDIT.
package repository

import (
	"time"

	"github.com/google/uuid"
)

const (
	TableTask             = "tasks"
	ColumnTaskID          = "id"
	ColumnTaskName        = "name"
	ColumnTaskDescription = "description"
	ColumnTaskCreatedBy   = "created_by"
	ColumnTaskDoer        = "doer"
	ColumnTaskDone        = "done"
	ColumnTaskRepeatable  = "repeatable"
	ColumnTaskRepeatAfter = "repeat_after"
	ColumnTaskDoBefore    = "do_before"
	ColumnTaskCreatedAt   = "created_at"
	ColumnTaskUpdatedAt   = "updated_at"
)

// Task represents the Task message.
type TaskModel struct {
	ID string

	Name string

	Description *string

	CreatedBy string

	Doer string

	Done bool

	Repeatable bool

	RepeatAfter *int

	DoBefore *time.Time

	CreatedAt time.Time

	UpdatedAt *time.Time
}

func (m TaskModel) Values() []any {
	return []any{
		m.ID,
		m.Name,
		m.Description,
		m.CreatedBy,
		m.Doer,
		m.Done,
		m.Repeatable,
		m.RepeatAfter,
		m.DoBefore,
		m.CreatedAt,
		m.UpdatedAt,
	}
}

func Converter(task Task) TaskModel {
	return TaskModel{

		ID: task.ID.String(),

		Name: task.Name,

		Description: task.Description,

		CreatedBy: task.CreatedBy,

		Doer: task.Doer,

		Done: task.Done,

		Repeatable: task.Repeatable,

		RepeatAfter: task.RepeatAfter,

		DoBefore: task.DoBefore,

		CreatedAt: task.CreatedAt,

		UpdatedAt: task.UpdatedAt,
	}
}

func ReverseConverter(taskModel TaskModel) Task {
	return Task{

		ID: uuid.MustParse(taskModel.ID),

		Name: taskModel.Name,

		Description: taskModel.Description,

		CreatedBy: taskModel.CreatedBy,

		Doer: taskModel.Doer,

		Done: taskModel.Done,

		Repeatable: taskModel.Repeatable,

		RepeatAfter: taskModel.RepeatAfter,

		DoBefore: taskModel.DoBefore,

		CreatedAt: taskModel.CreatedAt,

		UpdatedAt: taskModel.UpdatedAt,
	}
}
