//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for WeAll.
const (
	Me  WeAll = "me"
	You WeAll = "you"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// Task defines model for Task.
type Task struct {
	CreatedBy   WeAll              `json:"created_by"`
	Description *string            `json:"description"`
	DoBefore    time.Time          `json:"do_before"`
	Doer        WeAll              `json:"doer"`
	Done        bool               `json:"done"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
	Range       *int               `json:"range"`
	Repeatable  bool               `json:"repeatable"`
}

// TodosResponse defines model for TodosResponse.
type TodosResponse struct {
	Tasks []Task `json:"tasks"`
}

// WeAll defines model for WeAll.
type WeAll string

// CreateNewTaskJSONRequestBody defines body for CreateNewTask for application/json ContentType.
type CreateNewTaskJSONRequestBody = Task

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllTodos request
	GetAllTodos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNewTaskWithBody request with any body
	CreateNewTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateNewTask(ctx context.Context, body CreateNewTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTaskByID request
	DeleteTaskByID(ctx context.Context, todoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskByID request
	GetTaskByID(ctx context.Context, todoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllTodos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllTodosRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewTask(ctx context.Context, body CreateNewTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTaskByID(ctx context.Context, todoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaskByIDRequest(c.Server, todoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskByID(ctx context.Context, todoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskByIDRequest(c.Server, todoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllTodosRequest generates requests for GetAllTodos
func NewGetAllTodosRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/todo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNewTaskRequest calls the generic CreateNewTask builder with application/json body
func NewCreateNewTaskRequest(server string, body CreateNewTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateNewTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateNewTaskRequestWithBody generates requests for CreateNewTask with any type of body
func NewCreateNewTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/todo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTaskByIDRequest generates requests for DeleteTaskByID
func NewDeleteTaskByIDRequest(server string, todoId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "todo_id", runtime.ParamLocationPath, todoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/todo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskByIDRequest generates requests for GetTaskByID
func NewGetTaskByIDRequest(server string, todoId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "todo_id", runtime.ParamLocationPath, todoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/todo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllTodosWithResponse request
	GetAllTodosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllTodosResponse, error)

	// CreateNewTaskWithBodyWithResponse request with any body
	CreateNewTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewTaskResponse, error)

	CreateNewTaskWithResponse(ctx context.Context, body CreateNewTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNewTaskResponse, error)

	// DeleteTaskByIDWithResponse request
	DeleteTaskByIDWithResponse(ctx context.Context, todoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTaskByIDResponse, error)

	// GetTaskByIDWithResponse request
	GetTaskByIDWithResponse(ctx context.Context, todoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTaskByIDResponse, error)
}

type GetAllTodosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TodosResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllTodosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllTodosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNewTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		TaskId openapi_types.UUID `json:"task_id"`
	}
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateNewTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNewTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaskByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteTaskByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaskByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTaskByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllTodosWithResponse request returning *GetAllTodosResponse
func (c *ClientWithResponses) GetAllTodosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllTodosResponse, error) {
	rsp, err := c.GetAllTodos(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllTodosResponse(rsp)
}

// CreateNewTaskWithBodyWithResponse request with arbitrary body returning *CreateNewTaskResponse
func (c *ClientWithResponses) CreateNewTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewTaskResponse, error) {
	rsp, err := c.CreateNewTaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateNewTaskWithResponse(ctx context.Context, body CreateNewTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateNewTaskResponse, error) {
	rsp, err := c.CreateNewTask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewTaskResponse(rsp)
}

// DeleteTaskByIDWithResponse request returning *DeleteTaskByIDResponse
func (c *ClientWithResponses) DeleteTaskByIDWithResponse(ctx context.Context, todoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTaskByIDResponse, error) {
	rsp, err := c.DeleteTaskByID(ctx, todoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaskByIDResponse(rsp)
}

// GetTaskByIDWithResponse request returning *GetTaskByIDResponse
func (c *ClientWithResponses) GetTaskByIDWithResponse(ctx context.Context, todoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTaskByIDResponse, error) {
	rsp, err := c.GetTaskByID(ctx, todoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskByIDResponse(rsp)
}

// ParseGetAllTodosResponse parses an HTTP response from a GetAllTodosWithResponse call
func ParseGetAllTodosResponse(rsp *http.Response) (*GetAllTodosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllTodosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TodosResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateNewTaskResponse parses an HTTP response from a CreateNewTaskWithResponse call
func ParseCreateNewTaskResponse(rsp *http.Response) (*CreateNewTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNewTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			TaskId openapi_types.UUID `json:"task_id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTaskByIDResponse parses an HTTP response from a DeleteTaskByIDWithResponse call
func ParseDeleteTaskByIDResponse(rsp *http.Response) (*DeleteTaskByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaskByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTaskByIDResponse parses an HTTP response from a GetTaskByIDWithResponse call
func ParseGetTaskByIDResponse(rsp *http.Response) (*GetTaskByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Todo list
	// (GET /api/v1/todo)
	GetAllTodos(w http.ResponseWriter, r *http.Request)
	// Creates a new task
	// (POST /api/v1/todo)
	CreateNewTask(w http.ResponseWriter, r *http.Request)
	// delete task by todo_id
	// (DELETE /api/v1/todo/{todo_id})
	DeleteTaskByID(w http.ResponseWriter, r *http.Request, todoId openapi_types.UUID)
	// Get task by todo_id
	// (GET /api/v1/todo/{todo_id})
	GetTaskByID(w http.ResponseWriter, r *http.Request, todoId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllTodos operation middleware
func (siw *ServerInterfaceWrapper) GetAllTodos(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllTodos(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateNewTask operation middleware
func (siw *ServerInterfaceWrapper) CreateNewTask(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateNewTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTaskByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "todo_id" -------------
	var todoId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "todo_id", r.PathValue("todo_id"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "todo_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskByID(w, r, todoId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTaskByID operation middleware
func (siw *ServerInterfaceWrapper) GetTaskByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "todo_id" -------------
	var todoId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "todo_id", r.PathValue("todo_id"), &todoId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "todo_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskByID(w, r, todoId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/v1/todo", wrapper.GetAllTodos)
	m.HandleFunc("POST "+options.BaseURL+"/api/v1/todo", wrapper.CreateNewTask)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/v1/todo/{todo_id}", wrapper.DeleteTaskByID)
	m.HandleFunc("GET "+options.BaseURL+"/api/v1/todo/{todo_id}", wrapper.GetTaskByID)

	return m
}

type GetAllTodosRequestObject struct {
}

type GetAllTodosResponseObject interface {
	VisitGetAllTodosResponse(w http.ResponseWriter) error
}

type GetAllTodos200JSONResponse TodosResponse

func (response GetAllTodos200JSONResponse) VisitGetAllTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllTodos500JSONResponse ErrorResponse

func (response GetAllTodos500JSONResponse) VisitGetAllTodosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateNewTaskRequestObject struct {
	Body *CreateNewTaskJSONRequestBody
}

type CreateNewTaskResponseObject interface {
	VisitCreateNewTaskResponse(w http.ResponseWriter) error
}

type CreateNewTask201JSONResponse struct {
	TaskId openapi_types.UUID `json:"task_id"`
}

func (response CreateNewTask201JSONResponse) VisitCreateNewTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateNewTask500JSONResponse ErrorResponse

func (response CreateNewTask500JSONResponse) VisitCreateNewTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTaskByIDRequestObject struct {
	TodoId openapi_types.UUID `json:"todo_id"`
}

type DeleteTaskByIDResponseObject interface {
	VisitDeleteTaskByIDResponse(w http.ResponseWriter) error
}

type DeleteTaskByID200Response struct {
}

func (response DeleteTaskByID200Response) VisitDeleteTaskByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteTaskByID404Response struct {
}

func (response DeleteTaskByID404Response) VisitDeleteTaskByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteTaskByID500JSONResponse ErrorResponse

func (response DeleteTaskByID500JSONResponse) VisitDeleteTaskByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTaskByIDRequestObject struct {
	TodoId openapi_types.UUID `json:"todo_id"`
}

type GetTaskByIDResponseObject interface {
	VisitGetTaskByIDResponse(w http.ResponseWriter) error
}

type GetTaskByID200JSONResponse Task

func (response GetTaskByID200JSONResponse) VisitGetTaskByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTaskByID404Response struct {
}

func (response GetTaskByID404Response) VisitGetTaskByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetTaskByID500JSONResponse ErrorResponse

func (response GetTaskByID500JSONResponse) VisitGetTaskByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get Todo list
	// (GET /api/v1/todo)
	GetAllTodos(ctx context.Context, request GetAllTodosRequestObject) (GetAllTodosResponseObject, error)
	// Creates a new task
	// (POST /api/v1/todo)
	CreateNewTask(ctx context.Context, request CreateNewTaskRequestObject) (CreateNewTaskResponseObject, error)
	// delete task by todo_id
	// (DELETE /api/v1/todo/{todo_id})
	DeleteTaskByID(ctx context.Context, request DeleteTaskByIDRequestObject) (DeleteTaskByIDResponseObject, error)
	// Get task by todo_id
	// (GET /api/v1/todo/{todo_id})
	GetTaskByID(ctx context.Context, request GetTaskByIDRequestObject) (GetTaskByIDResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllTodos operation middleware
func (sh *strictHandler) GetAllTodos(w http.ResponseWriter, r *http.Request) {
	var request GetAllTodosRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllTodos(ctx, request.(GetAllTodosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllTodos")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllTodosResponseObject); ok {
		if err := validResponse.VisitGetAllTodosResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateNewTask operation middleware
func (sh *strictHandler) CreateNewTask(w http.ResponseWriter, r *http.Request) {
	var request CreateNewTaskRequestObject

	var body CreateNewTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateNewTask(ctx, request.(CreateNewTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateNewTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateNewTaskResponseObject); ok {
		if err := validResponse.VisitCreateNewTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTaskByID operation middleware
func (sh *strictHandler) DeleteTaskByID(w http.ResponseWriter, r *http.Request, todoId openapi_types.UUID) {
	var request DeleteTaskByIDRequestObject

	request.TodoId = todoId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTaskByID(ctx, request.(DeleteTaskByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTaskByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTaskByIDResponseObject); ok {
		if err := validResponse.VisitDeleteTaskByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTaskByID operation middleware
func (sh *strictHandler) GetTaskByID(w http.ResponseWriter, r *http.Request, todoId openapi_types.UUID) {
	var request GetTaskByIDRequestObject

	request.TodoId = todoId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTaskByID(ctx, request.(GetTaskByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTaskByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTaskByIDResponseObject); ok {
		if err := validResponse.VisitGetTaskByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RUQU/jOhD+K9a8J71LXlMecMmtwNOKyx52V9oDQpWbTIrBsb32GDaq8t9XnpTSkFRl",
	"JQ7sBVLbM/PN9803Gyht46xBQwGKDYTyDhvJn/97b/0XDM6agOnAeevQk0K+xnTNHz9l4zRC0UeIBkOQ",
	"a4QMqHXpOJBXZg1dl4HHH1F5rKC42Sa43T2zq3ssCboMvsnwMC5YepSE1XLVpl9/e6yhgL/yF/z5Fnz+",
	"HRdap0QVhtIrR8qaFGOi1nKVoJKPOMKXQWWXK6yt53Zr6xtJUEAlCf8l1Uy0lELQvx2PNZx6m2VlrUZp",
	"0o2qBiVjVNVUNSMbHHJ+qdGIUtI/QThrp2K8NOtXQR4dShL4iL4V56KSbYDsED3KEK7RcyqO69+Mu3il",
	"L3fAgLcs7fM7yJXta7tl6Rn35HzYyobDk0kyPPCHImzCMXF42LpdFem9bEe99CmnsPTaJnZNbNLT1kbI",
	"oNlHvjNAEtrUlkEqYikWcR0DKYOL6FGrGPI6xjqleEQfeHDhZDafzVMx69BIp6CA09l8dgoZOEl33GIu",
	"ncofT3KyFedfI6V/iReZ5v+6ggI+IS20ZvpYgZ5Bjv9vPmeTWUNoOFQ6p1XJwfl96B3Uk3aU0oE+3PbA",
	"ifA1liWGUEct/O5ZBufviGG4vSYwXBtCb6TWol9E6UWITSN92zMlUhtCq8A6OxsmCL3kuf2MTzxF/cxg",
	"oAtbte/HJg/ocCKTQbuRgie/VXNsmuWbttCENVLg7QTHCbp4EbsVW59/MLF7FYOQwuCToJ7vbGCpfJP+",
	"LlXVJSwVaiQcj8MVn6euL9rrK7anlw0S+gDFzQZUwpIs+7wZC9imhdfqZnutHxPkdtrLR7Tom2AtzuZn",
	"BwKMJVHbaD6aZD141kqsWvHMYpcdXHwfRZV33glHRK6Vqf5UjdMOHgncdd2vAAAA//+Unyd+tAoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
