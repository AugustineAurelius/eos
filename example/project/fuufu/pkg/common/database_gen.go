//Code generated by generator, DO NOT EDIT.
package common

import (
	"context"
	"io"
	
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"
)

// For configuration
type ConnectionProvider interface {
	GetConnectionURL() string
}

type Database interface {
	io.Closer
	Querier
	Begginer
}

// Query
type Querier interface {
	Query(ctx context.Context, query string, args ...any) (Rows, error)
	QueryRow(ctx context.Context, query string, args ...any) Row
	Exec(ctx context.Context, query string, args ...any) (result, error)
}

type Rows interface {
	io.Closer
	Row
	Err() error
	Next() bool
}

type Row interface {
	Scan(dest ...any) error
}

type result interface {
	RowsAffected() (int64, error)
}

// Transaction
type Begginer interface {
	Begin(ctx context.Context) (Tx, error)
}

type Tx interface {
	Querier
	Commit(ctx context.Context) error
	Rollback(ctx context.Context) error
}


type tracer interface {
	trace.Tracer
}

type metricProvider interface {
	metric.Meter
}

type int64Counter interface {
	metric.Int64Counter
}

type logger interface {
	Debug(msg string, fields ...zap.Field)
	Info(msg string, fields ...zap.Field)
	Warn(msg string, fields ...zap.Field)
	Error(msg string, fields ...zap.Field)
	DPanic(msg string, fields ...zap.Field)
	Panic(msg string, fields ...zap.Field)
	Fatal(msg string, fields ...zap.Field)
	With(fields ...zap.Field) *zap.Logger
}
