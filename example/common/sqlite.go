//Code generated by generator, DO NOT EDIT.
package common

import (
	"context"
	"time"
    "database/sql"

	_ "github.com/mattn/go-sqlite3"
	"go.uber.org/zap"
	
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
    
)

type SqliteConnectionProvider struct {
    URL string
}

func (s *SqliteConnectionProvider) GetConnectionURL() string {
    return s.URL
}

type SqliteDB struct {
    db *sql.DB
	
	logger logger
	
	
	telemetry tracer
	
    
	queryCount      int64Counter
	execCount       int64Counter
	queryRowCounter int64Counter
	
}

func NewSqlite(ctx context.Context, provider SqliteConnectionProvider,
	
	logger logger,
	
	
	telemetry tracer, 
	
	
	metrics metricProvider,
	
) (SqliteDB, error){
    url := provider.GetConnectionURL()
    db, err := sql.Open("sqlite3", url)
    if err != nil {
        return SqliteDB{}, err
    }
	
	queryCount, err := metrics.Int64Counter("queryCount")
	if err != nil {
		return SqliteDB{}, err
	}
	execCount, err := metrics.Int64Counter("execCount")
	if err != nil {
		return SqliteDB{}, err
	}
	queryRowCounter, err := metrics.Int64Counter("queryRowCounter")
	if err != nil {
		return SqliteDB{}, err 
	}
	
    return SqliteDB{db: db,
		
		logger:          logger,
		
		
		telemetry:       telemetry,
		
		
		queryCount:      queryCount,
		execCount:       execCount,
		queryRowCounter: queryRowCounter,
		
	}, nil
}

func (s *SqliteDB) Close() error {
    return s.db.Close()
}

func NewSqliteInMemory(ctx context.Context,
	
	logger logger,
	
	
	telemetry tracer, 
	
	
	metrics metricProvider,
	
) (SqliteDB, error){
    db, err := sql.Open("sqlite3", ":memory:")
    if err != nil {
        return SqliteDB{}, err
    }
	
	queryCount, err := metrics.Int64Counter("queryCount")
	if err != nil {
		return SqliteDB{}, err
	}
	execCount, err := metrics.Int64Counter("execCount")
	if err != nil {
		return SqliteDB{}, err
	}
	queryRowCounter, err := metrics.Int64Counter("queryRowCounter")
	if err != nil {
		return SqliteDB{}, err 
	}
	
    return SqliteDB{db: db,
		
		logger:          logger,
		
		
		telemetry:       telemetry,
		
		
		queryCount:      queryCount,
		execCount:       execCount,
		queryRowCounter: queryRowCounter,
		
}, nil
}

func (db *SqliteDB) QueryRow(ctx context.Context, query string, args ...any) row {
	
	ctx, span := db.telemetry.Start(ctx, "QueryRow",trace.WithAttributes(attribute.String("query", query), attribute.String("db_type", "Sqllite")))
	defer span.End()
    
	
	start := time.Now()
	db.logger.Info("Executing QueryRow", zap.String("query", query))
	
	row := db.db.QueryRowContext(ctx, query, args...)
	
	duration := time.Since(start).Seconds()
	db.logger.Info("QueryRow succeeded", zap.Float64("duration", duration))
	
	
	db.queryRowCounter.Add(ctx, 1)
	
    return row
}

func (db *SqliteDB) Query(ctx context.Context, query string, args ...any) (rows, error) {
	
	ctx, span := db.telemetry.Start(ctx, "Query",trace.WithAttributes(attribute.String("query", query), attribute.String("db_type", "Sqllite")))
	defer span.End()
    
	
    start := time.Now()
    db.logger.Info("Executing Query", zap.String("query", query))
	
    rows, err := db.db.QueryContext(ctx, query, args...)
	if err != nil {
		
		span.SetStatus(codes.Error, err.Error())
		span.RecordError(err)
        
		
        db.logger.Error("Query failed", zap.Error(err))
		
		return nil, err
	}
	
	duration := time.Since(start).Seconds()
    db.logger.Info("Query succeeded", zap.Float64("duration", duration))
	
	
	db.queryCount.Add(ctx, 1)
    
    return &SqliteRows{rows}, nil
}

func (db *SqliteDB) Exec(ctx context.Context, query string, args ...any) (result, error) {
	
    ctx, span := db.telemetry.Start(ctx, "Exec",trace.WithAttributes(attribute.String("query", query), attribute.String("db_type", "Sqllite")))
    defer span.End()
    
	
	start := time.Now()
    db.logger.Info("Executing Exec", zap.String("query", query))
	
    r, err := db.db.ExecContext(ctx, query, args...)
    if err != nil {
        
		span.SetStatus(codes.Error, err.Error())
		span.RecordError(err)
        
		
        db.logger.Error("Exec failed", zap.Error(err))
		
		return nil, err
    } 
	
    duration := time.Since(start).Seconds()
    db.logger.Info("Exec succeeded", zap.Float64("duration", duration))
	
	
	db.execCount.Add(ctx, 1)
    
    return r, err
}

func (s *SqliteDB) BeginTransaction(ctx context.Context) (Tx, error) {
    tx, err := s.db.BeginTx(ctx, &sql.TxOptions{})
    if err != nil {
        return nil, err
    }
    return &SqliteTx{tx}, nil
}

type SqliteRows struct {
    *sql.Rows
}

func (s *SqliteRows) Next() bool {
    return s.Rows.Next()
}

func (s *SqliteRows) Scan(dest ...any) error {
    return s.Rows.Scan(dest...)
}

func (s *SqliteRows) Close() error {
    return s.Rows.Close()
}

func (s *SqliteRows) Err() error {
    return s.Rows.Err()
}

type SqliteTx struct {
	*sql.Tx
}

func (s *SqliteTx) Query(ctx context.Context, query string, args ...any) (rows, error) {
	rows, err := s.Tx.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	return &SqliteRows{rows}, nil
}

func (s *SqliteTx) QueryRow(ctx context.Context, query string, args ...any) row {
	return s.Tx.QueryRowContext(ctx, query, args...)
}

func (s *SqliteTx) Exec(ctx context.Context, query string, args ...any) (result, error) {
	return s.Tx.ExecContext(ctx, query, args...)
}

func (s *SqliteTx) Commit(ctx context.Context) error {
	return s.Tx.Commit()
}

func (s *SqliteTx) Rollback(ctx context.Context) error {
	return s.Tx.Rollback()
}
