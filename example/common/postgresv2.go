// Code generated by generator, DO NOT EDIT.
package common

import (
    "context"
    "time"
	"regexp"
	"strconv"

    "github.com/jackc/pgx/v5"
    "github.com/jackc/pgx/v5/pgconn"
    "github.com/jackc/pgx/v5/pgxpool"
    "go.uber.org/zap"
	
	"go.opentelemetry.io/otel/metric"
	
	
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
    
)




type PgxConnectionProvider struct {
	URL string
}

func (p *PgxConnectionProvider) GetConnectionURL() string {
	return p.URL
}

type PgxPoolDB struct {
    pool     *pgxpool.Pool
	
	logger logger
	
	
	telemetry tracer
	
    
	queryCount      int64Counter
	execCount       int64Counter
	queryRowCounter int64Counter
	
}

func NewPostgres(ctx context.Context, provider PgxConnectionProvider,
	
	logger logger,
	
	
	telemetry tracer, 
	
	
	metrics metricProvider,
	
) (PgxPoolDB, error) {
	url := provider.GetConnectionURL()
	pool, err := pgxpool.New(ctx, url)
	if err != nil {
		return PgxPoolDB{}, err
	}
	
	queryCount, err := metrics.Int64Counter("queryCount",metric.WithDescription("Postgres"))
	if err != nil {
		return PgxPoolDB{}, err
	}
	execCount, err := metrics.Int64Counter("execCount",metric.WithDescription("Postgres"))
	if err != nil {
		return PgxPoolDB{}, err
	}
	queryRowCounter, err := metrics.Int64Counter("queryRowCounter",metric.WithDescription("Postgres"))
	if err != nil {
		return PgxPoolDB{}, err
	}
	
	return PgxPoolDB{pool: pool,
		
		logger:          logger,
		
		
		telemetry:       telemetry,
		
		
		queryCount:      queryCount,
		execCount:       execCount,
		queryRowCounter: queryRowCounter,
		

	}, nil
}

func (db *PgxPoolDB) Close() error {
	db.pool.Close()
	return nil
}


func (db *PgxPoolDB) QueryRow(ctx context.Context, query string, args ...any) row{
	
	ctx, span := db.telemetry.Start(ctx, "QueryRow",trace.WithAttributes(attribute.String("query", query), attribute.String("db_type", "Postgres")))
	defer span.End()
    
	
	start := time.Now()
	db.logger.Info("Executing QueryRow", zap.String("query", query))
	
	row := db.pool.QueryRow(ctx, ReplaceQuestions(query), args...)
	
	duration := time.Since(start).Seconds()
	db.logger.Info("QueryRow succeeded", zap.Float64("duration", duration))
	
	
	db.queryRowCounter.Add(ctx, 1)
	

	return &PgxRow{row}
}

func (db *PgxPoolDB) Query(ctx context.Context, query string, args ...any) (rows, error) {
	
	ctx, span := db.telemetry.Start(ctx, "Query",trace.WithAttributes(attribute.String("query", query), attribute.String("db_type", "Postgres")))
	defer span.End()
    
	
    start := time.Now()
    db.logger.Info("Executing Query", zap.String("query", query))
	
	rows, err := db.pool.Query(ctx, ReplaceQuestions(query), args...)
	if err != nil {
		
		span.SetStatus(codes.Error, err.Error())
		span.RecordError(err)
        
		
        db.logger.Error("Query failed", zap.Error(err))
		
		return nil, err
	}
	
	duration := time.Since(start).Seconds()
    db.logger.Info("Query succeeded", zap.Float64("duration", duration))
	
	
	db.queryCount.Add(ctx, 1)
    
	return &PgxRows{rows}, nil
}

func (db *PgxPoolDB) Exec(ctx context.Context, query string, args ...any) (result, error) {
    
    ctx, span := db.telemetry.Start(ctx, "Exec",trace.WithAttributes(attribute.String("query", query), attribute.String("db_type", "Postgres")))
    defer span.End()
    
	
	start := time.Now()
    db.logger.Info("Executing Exec", zap.String("query", query))
	
    r, err := db.pool.Exec(ctx, ReplaceQuestions(query), args...)
    if err != nil {
        
		span.SetStatus(codes.Error, err.Error())
		span.RecordError(err)
        
		
        db.logger.Error("Exec failed", zap.Error(err))
		
		return nil, err
    } 
	
    duration := time.Since(start).Seconds()
    db.logger.Info("Exec succeeded", zap.Float64("duration", duration))
	
	
	db.execCount.Add(ctx, 1)
    
    return &PgxResult{r}, err
}

func (db *PgxPoolDB) BeginTransaction(ctx context.Context) (Tx, error) {
	tx, err := db.pool.Begin(ctx)
	if err != nil {
		return nil, err
	}
	return &PgxTx{tx}, nil
}

type PgxRow struct {
	pgx.Row
}

func (db *PgxRow) Scan(dest ...any) error {
	return db.Row.Scan(dest...)
}


type PgxRows struct {
	pgx.Rows
}

func (db *PgxRows) Next() bool {
	return db.Rows.Next()
}

func (db *PgxRows) Scan(dest ...any) error {
	return db.Rows.Scan(dest...)
}

func (db *PgxRows) Close() error {
	db.Rows.Close()
	return nil
}

func (db *PgxRows) Err() error {
	return db.Rows.Err()
}

type PgxTx struct {
	pgx.Tx
}

func (p *PgxTx) Query(ctx context.Context, query string, args ...any) (rows, error) {
	rows, err := p.Tx.Query(ctx, ReplaceQuestions(query), args...)
	if err != nil {
		return nil, err
	}
	return &PgxRows{rows}, nil
}

func (p *PgxTx) QueryRow(ctx context.Context, query string, args ...any) row {
	return &PgxRow{p.Tx.QueryRow(ctx, ReplaceQuestions(query), args...)}
}

func (p *PgxTx) Exec(ctx context.Context, query string, args ...any) (result, error) {
	r, err := p.Tx.Exec(ctx, ReplaceQuestions(query), args...)
	return &PgxResult{r}, err
}

func (p *PgxTx) Commit(ctx context.Context) error {
	return p.Tx.Commit(ctx)
}

func (p *PgxTx) Rollback(ctx context.Context) error {
	return p.Tx.Rollback(ctx)
}

type PgxResult struct {
	pgconn.CommandTag
}

func (r *PgxResult) RowsAffected() (int64, error) {
	return r.CommandTag.RowsAffected(), nil
}


func ReplaceQuestions(query string) string {
    var count int
    re := regexp.MustCompile(`\?`)
    return re.ReplaceAllStringFunc(query, func(s string) string {
        count++
        return "$" + strconv.Itoa(count)
    })
}
