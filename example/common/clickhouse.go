//Code generated by generator, DO NOT EDIT.
package common

import (
	"context"
	"database/sql"
	"errors"
	"time"

	"github.com/ClickHouse/clickhouse-go/v2"
	"go.uber.org/zap"
	
	
)

type ClickhouseConnectionProvider struct {
	Host      string
	Port      int
	Databasse string
	User      string
	Password  string
}

type ClickhouseQuerier struct {
	client *sql.DB
	
	logger logger
	
	
    
}

func NewClickhouse(cp ClickhouseConnectionProvider,
	
	logger logger,
	
	
	
) (ClickhouseQuerier, error) {
	conn := clickhouse.OpenDB(&clickhouse.Options{
		Addr: []string{cp.Host},
		Auth: clickhouse.Auth{
			Database: cp.Databasse,
			Username: cp.User,
			Password: cp.Password,
		},
		Settings: clickhouse.Settings{
			"max_execution_time": 60,
		},
		DialTimeout: time.Second * 30,
		Compression: &clickhouse.Compression{
			Method: clickhouse.CompressionLZ4,
		},
		Debug:                true,
		BlockBufferSize:      10,
		MaxCompressionBuffer: 10240,
	})
	conn.SetMaxIdleConns(5)
	conn.SetMaxOpenConns(10)
	conn.SetConnMaxLifetime(time.Hour)

	
	return ClickhouseQuerier{client: conn,
		
		logger:          logger,
		
		
		
}, nil
}


func (db *ClickhouseQuerier) QueryRow(ctx context.Context, query string, args ...any) row {
	
	
	start := time.Now()
	db.logger.Info("Executing QueryRow", zap.String("query", query))
	
	row := db.client.QueryRowContext(ctx, query, args...)
	
	duration := time.Since(start).Seconds()
	db.logger.Info("QueryRow succeeded", zap.Float64("duration", duration))
	
	
	return &ClickhouseRow{row}
}

func (db *ClickhouseQuerier) Query(ctx context.Context, query string, args ...any) (rows, error) {
	
	
    start := time.Now()
    db.logger.Info("Executing Query", zap.String("query", query))
	
	rows, err := db.client.QueryContext(ctx, query, args...)
	if err != nil {
		
		
        db.logger.Error("Query failed", zap.Error(err))
		
		return nil, err
	}
	
	duration := time.Since(start).Seconds()
    db.logger.Info("Query succeeded", zap.Float64("duration", duration))
	
	
	return &ClickhouseRows{rows}, nil
}

func (db *ClickhouseQuerier) Exec(ctx context.Context, query string, args ...any) (result, error) {
	
	
	start := time.Now()
    db.logger.Info("Executing Exec", zap.String("query", query))
	
	res, err := db.client.ExecContext(ctx, query, args...)
	if err != nil {
		
		
        db.logger.Error("Exec failed", zap.Error(err))
		
		return nil, err
	}
	
    duration := time.Since(start).Seconds()
    db.logger.Info("Exec succeeded", zap.Float64("duration", duration))
	
	
	return &ClickhouseResult{res}, nil
}

type ClickhouseRows struct {
	rows
}

func (r *ClickhouseRows) Err() error {
	return r.rows.Err()
}

func (r *ClickhouseRows) Next() bool {
	return r.rows.Next()
}

func (r *ClickhouseRows) Close() error {
	return r.rows.Close()
}

func (r *ClickhouseRows) Scan(dest ...any) error {
	return r.rows.Scan(dest...)
}

type ClickhouseRow struct {
	row
}

func (r *ClickhouseRow) Scan(dest ...any) error {
	return r.row.Scan(dest...)
}

type ClickhouseResult struct {
	result
}

func (r *ClickhouseResult) RowsAffected() (int64, error) {
	return r.result.RowsAffected()
}

type ClickhouseBegginer struct {
	*ClickhouseQuerier
}

func (b *ClickhouseBegginer) Begin(ctx context.Context) (Tx, error) {
	return &ClickhouseTx{}, errors.New("not supported")
}

type ClickhouseTx struct {
	*ClickhouseQuerier
}

func (t *ClickhouseTx) Commit(ctx context.Context) error {
	return errors.New("not supported")

}

func (t *ClickhouseTx) Rollback(ctx context.Context) error {
	return errors.New("not supported")
}

