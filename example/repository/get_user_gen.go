//Code generated by generator, DO NOT EDIT.
package repository

import (
	"context"
	"fmt"
	"database/sql"
    
	sq "github.com/Masterminds/squirrel"
  "github.com/google/uuid"
)


func (r *CommandRepository) Get(ctx context.Context,  opts ...FilterOpt) (*User, error) {
	return get(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) Get(ctx context.Context,  opts ...FilterOpt) (*User, error) {
	return get(ctx, r.runner, r.placeholder, opts...)
}


func (r *CommandRepository) GetMany(ctx context.Context, opts ...FilterOpt) (Users, error) {
	return getMany(ctx, r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetMany(ctx context.Context, opts ...FilterOpt) (Users, error) {
	return getMany(ctx, r.runner, r.placeholder, opts...)
}

func get(ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt) (*User, error){
  	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(ColumnUserID, ColumnUserName, ColumnUserEmail, ColumnUserBalance).From(TableUser).PlaceholderFormat(sq.Dollar)
	default:
		b = sq.Select(ColumnUserID, ColumnUserName, ColumnUserEmail, ColumnUserBalance).From(TableUser).PlaceholderFormat(sq.Question)
	}
  
	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

  	query, args := b.MustSql()

	var model User
	err := run.QueryRowContext(ctx, query, args...).Scan(&model.ID, &model.Name, &model.Email, &model.Balance)
	if err != nil {
		return nil, fmt.Errorf("failed to get query %s with args %v error = %w" , query, args, err)
	}


	return &model, err
}

func getMany(ctx context.Context, run querier, placeholder wildcard,  opts ...FilterOpt) (Users, error) {
  	var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(ColumnUserID, ColumnUserName, ColumnUserEmail, ColumnUserBalance).From(TableUser).PlaceholderFormat(sq.Dollar)  
	default:
		b = sq.Select(ColumnUserID, ColumnUserName, ColumnUserEmail, ColumnUserBalance).From(TableUser).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

 	query, args := b.MustSql()

  	var users Users
	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()


	var model User
	for rows.Next() {
		err = rows.Scan(&model.ID, &model.Name, &model.Email, &model.Balance)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		users = append(users, model)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return users, err
}


func (r *CommandRepository) GetLazy (ctx context.Context,  opts ...FilterOpt)  (iterUser, error){
	return getManyLazy(ctx,r.runner,r.placeholder,opts...)
}

func (r *QueryRepository) GetLazy(ctx context.Context,  opts ...FilterOpt)  (iterUser, error){
	return getManyLazy(ctx,r.runner,r.placeholder, opts...)
}

func getManyLazy (ctx context.Context, run querier,placeholder wildcard, opts ...FilterOpt) (iterUser, error){
 	 var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
		b = sq.Select(ColumnUserID, ColumnUserName, ColumnUserEmail, ColumnUserBalance).From(TableUser).PlaceholderFormat(sq.Dollar)
	default:
		b = sq.Select(ColumnUserID, ColumnUserName, ColumnUserEmail, ColumnUserBalance).From(TableUser).PlaceholderFormat(sq.Question)
	}

	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)

  	query, args := b.MustSql()
	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	
	return  userIter(rows), nil
}

func userIter(rows *sql.Rows)iterUser{
  return func(yield func(User) bool) {
    defer rows.Close()
    var model User
    for rows.Next() {
        err := rows.Scan(&model.ID, &model.Name, &model.Email, &model.Balance)
		if err != nil {
			return
		}
    
		if !yield(model) {
			return
		}
    }
  }
}
func (r *CommandRepository) GetID (ctx context.Context,  opts ...FilterOpt)  ([]uuid.UUID, error){
	return getID(ctx,r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetID (ctx context.Context,  opts ...FilterOpt)  ([]uuid.UUID, error){
	return getID(ctx,r.runner, r.placeholder, opts...)
}

func getID (ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt)  ([]uuid.UUID, error){
  var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
	b = sq.Select(
		ColumnUserID,
	).From(TableUser).PlaceholderFormat(sq.Dollar)

	default:
	b = sq.Select(
		ColumnUserID,
	).From(TableUser).PlaceholderFormat(sq.Question)
	}



	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)
	query, args := 	b.MustSql()	
    IDs := make([]uuid.UUID, 0, 32) 

	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp uuid.UUID
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		IDs = append(IDs, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return IDs, err
}
func (r *CommandRepository) GetName (ctx context.Context,  opts ...FilterOpt)  ([]string, error){
	return getName(ctx,r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetName (ctx context.Context,  opts ...FilterOpt)  ([]string, error){
	return getName(ctx,r.runner, r.placeholder, opts...)
}

func getName (ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt)  ([]string, error){
  var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
	b = sq.Select(
		ColumnUserName,
	).From(TableUser).PlaceholderFormat(sq.Dollar)

	default:
	b = sq.Select(
		ColumnUserName,
	).From(TableUser).PlaceholderFormat(sq.Question)
	}



	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)
	query, args := 	b.MustSql()	
    Names := make([]string, 0, 32) 

	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp string
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		Names = append(Names, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return Names, err
}
func (r *CommandRepository) GetEmail (ctx context.Context,  opts ...FilterOpt)  ([]*string, error){
	return getEmail(ctx,r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetEmail (ctx context.Context,  opts ...FilterOpt)  ([]*string, error){
	return getEmail(ctx,r.runner, r.placeholder, opts...)
}

func getEmail (ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt)  ([]*string, error){
  var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
	b = sq.Select(
		ColumnUserEmail,
	).From(TableUser).PlaceholderFormat(sq.Dollar)

	default:
	b = sq.Select(
		ColumnUserEmail,
	).From(TableUser).PlaceholderFormat(sq.Question)
	}



	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)
	query, args := 	b.MustSql()	
    Emails := make([]*string, 0, 32) 

	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp *string
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		Emails = append(Emails, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return Emails, err
}
func (r *CommandRepository) GetBalance (ctx context.Context,  opts ...FilterOpt)  ([]float64, error){
	return getBalance(ctx,r.runner, r.placeholder, opts...)
}

func (r *QueryRepository) GetBalance (ctx context.Context,  opts ...FilterOpt)  ([]float64, error){
	return getBalance(ctx,r.runner, r.placeholder, opts...)
}

func getBalance (ctx context.Context, run querier, placeholder wildcard, opts ...FilterOpt)  ([]float64, error){
  var b sq.SelectBuilder

	switch placeholder {
	case DollarWildcard:
	b = sq.Select(
		ColumnUserBalance,
	).From(TableUser).PlaceholderFormat(sq.Dollar)

	default:
	b = sq.Select(
		ColumnUserBalance,
	).From(TableUser).PlaceholderFormat(sq.Question)
	}



	f := Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](&f)
	}
	b = applyWhere(b, &f)
	query, args := 	b.MustSql()	
    Balances := make([]float64, 0, 32) 

	rows, err := run.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp float64
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		Balances = append(Balances, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return Balances, err
}