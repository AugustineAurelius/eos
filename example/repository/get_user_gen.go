//Code generated by generator, DO NOT EDIT.
package repository


import (
	"context"
	"fmt"
	txrunner "github.com/AugustineAurelius/eos/example/tx_runner"
  common "github.com/AugustineAurelius/eos/example/common"

	sq "github.com/Masterminds/squirrel"
	"github.com/google/uuid"
)



// GetUser retrieves a User by ID.
func (r *Repository) Get(ctx context.Context,  id uuid.UUID) (*User, error) {
	if tx, ok := txrunner.FromContex(ctx); ok {
		return get(ctx, tx, id)
    } else {
		return get(ctx, r.db, id)
    }
}


func get(ctx context.Context, run common.Querier, id uuid.UUID) (*User, error){
	query, args := sq.Select(
		ColumnUserID,
		ColumnUserName,
		ColumnUserEmail,
	).
	From(TableUser).
	Where(sq.Eq{ColumnUserID: id}).PlaceholderFormat(sq.Question).MustSql()

	var userModel UserModel
	err := run.QueryRow(ctx, query, args...).Scan(
		&userModel.ID,
		&userModel.Name,
		&userModel.Email,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to get query %s with args %v error = %w" , query, args, err)
	}

	user := ReverseConverter(userModel)

	
	return &user, err

}

// GetManyUser retrieves a User by filter.
func (r *Repository) GetMany(ctx context.Context, f UserFilter) (Users, error) {
	if tx, ok := txrunner.FromContex(ctx); ok {
		return getMany(ctx, tx, f)
    } else {
		return getMany(ctx, r.db, f)
    }
}

func getMany(ctx context.Context, run common.Querier, f UserFilter) (Users, error) {
	b := sq.Select(
		ColumnUserID,
		ColumnUserName,
		ColumnUserEmail,
	).From(TableUser).PlaceholderFormat(sq.Question)

	b = ApplyWhere(b, f)

    query, args := 	b.MustSql()

    var users Users

	rows, err := run.Query(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()


	var userModel UserModel
	for rows.Next() {
		err := rows.Scan(
			&userModel.ID,
			&userModel.Name,
			&userModel.Email,
		)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		users = append(users, ReverseConverter(userModel))
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return users, err
}



