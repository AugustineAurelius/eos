//Code generated by generator, DO NOT EDIT.
package repository

import (
	"context"
	"fmt"
    
	common "github.com/AugustineAurelius/eos/example/common"
	sq "github.com/Masterminds/squirrel"
    "github.com/google/uuid"
)



// GetUser retrieves a User by ID.
func (r *CommandRepository) Get(ctx context.Context, opts ...FilterOpt) (*User, error) {
	return get(ctx, r.db, opts...)
}

func (r *QueryRepository) Get(ctx context.Context, opts ...FilterOpt) (*User, error) {
	return get(ctx, r.db, opts...)
}

// GetManyUser retrieves a User by filter.
func (r *CommandRepository) GetMany(ctx context.Context, opts ...FilterOpt) (Users, error) {
	return getMany(ctx, r.db, opts...)
}

// GetManyUser retrieves a User by filter.
func (r *QueryRepository) GetMany(ctx context.Context, opts ...FilterOpt) (Users, error) {
	return getMany(ctx, r.db, opts...)
}


func get(ctx context.Context, run common.Querier, opts ...FilterOpt) (*User, error){
	b := sq.Select(
		ColumnUserID,
		ColumnUserName,
		ColumnUserEmail,
	).From(TableUser).PlaceholderFormat(sq.Question)

	f := &Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](f)
	}
	b = ApplyWhere(b, *f)

    query, args := 	b.MustSql()

	var userModel UserModel
	err := run.QueryRow(ctx, query, args...).Scan(
		&userModel.ID,
		&userModel.Name,
		&userModel.Email,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to get query %s with args %v error = %w" , query, args, err)
	}

	user := ReverseConverter(userModel)

	return &user, err
}

func getMany(ctx context.Context, run common.Querier,  opts ...FilterOpt) (Users, error) {
	b := sq.Select(
		ColumnUserID,
		ColumnUserName,
		ColumnUserEmail,
	).From(TableUser).PlaceholderFormat(sq.Question)

	f := &Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](f)
	}
	b = ApplyWhere(b, *f)

    query, args := 	b.MustSql()

    var users Users

	rows, err := run.Query(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()


	var userModel UserModel
	for rows.Next() {
		err := rows.Scan(
			&userModel.ID,
			&userModel.Name,
			&userModel.Email,
		)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		users = append(users, ReverseConverter(userModel))
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return users, err
}
func (r *CommandRepository) GetID (ctx context.Context,  opts ...FilterOpt)  ([]uuid.UUID, error){
	return getID(ctx,r.db,opts...)
}

func (r *QueryRepository) GetID (ctx context.Context,  opts ...FilterOpt)  ([]uuid.UUID, error){
	return getID(ctx,r.db,opts...)
}

func getID (ctx context.Context, run common.Querier,   opts ...FilterOpt)  ([]uuid.UUID, error){
	b := sq.Select(
		ColumnUserID,
	).From(TableUser).PlaceholderFormat(sq.Question)

	f := &Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](f)
	}
	b = ApplyWhere(b, *f)
	query, args := 	b.MustSql()	
    IDs := make([]uuid.UUID, 0, 32) 

	rows, err := run.Query(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp uuid.UUID
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		IDs = append(IDs, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return IDs, err
}
func (r *CommandRepository) GetName (ctx context.Context,  opts ...FilterOpt)  ([]string, error){
	return getName(ctx,r.db,opts...)
}

func (r *QueryRepository) GetName (ctx context.Context,  opts ...FilterOpt)  ([]string, error){
	return getName(ctx,r.db,opts...)
}

func getName (ctx context.Context, run common.Querier,   opts ...FilterOpt)  ([]string, error){
	b := sq.Select(
		ColumnUserName,
	).From(TableUser).PlaceholderFormat(sq.Question)

	f := &Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](f)
	}
	b = ApplyWhere(b, *f)
	query, args := 	b.MustSql()	
    Names := make([]string, 0, 32) 

	rows, err := run.Query(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp string
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		Names = append(Names, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return Names, err
}
func (r *CommandRepository) GetEmail (ctx context.Context,  opts ...FilterOpt)  ([]*string, error){
	return getEmail(ctx,r.db,opts...)
}

func (r *QueryRepository) GetEmail (ctx context.Context,  opts ...FilterOpt)  ([]*string, error){
	return getEmail(ctx,r.db,opts...)
}

func getEmail (ctx context.Context, run common.Querier,   opts ...FilterOpt)  ([]*string, error){
	b := sq.Select(
		ColumnUserEmail,
	).From(TableUser).PlaceholderFormat(sq.Question)

	f := &Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](f)
	}
	b = ApplyWhere(b, *f)
	query, args := 	b.MustSql()	
    Emails := make([]*string, 0, 32) 

	rows, err := run.Query(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	defer rows.Close()

	var temp *string
	for rows.Next() {
		err = rows.Scan(&temp)
		if err != nil {
			return nil, fmt.Errorf("error scanning row: %w", err)
		}
		Emails = append(Emails, temp)
	}

	if rows.Err() != nil {
		return nil, fmt.Errorf("error iterating rows: %w", rows.Err())
	}

	return Emails, err
}

func (r *CommandRepository) GetLazy (ctx context.Context,  opts ...FilterOpt)  (iterUser, error){
	return getManyLazy(ctx,r.db,opts...)
}

func (r *QueryRepository) GetLazy(ctx context.Context,  opts ...FilterOpt)  (iterUser, error){
	return getManyLazy(ctx,r.db,opts...)
}

func getManyLazy (ctx context.Context, run common.Querier, opts ...FilterOpt) (iterUser, error){
	b := sq.Select(
		ColumnUserID,
		ColumnUserName,
		ColumnUserEmail,
	).From(TableUser).PlaceholderFormat(sq.Question)

	f := &Filter{}
	for i := 0; i < len(opts); i++ {
		opts[i](f)
	}
	b = ApplyWhere(b, *f)

    query, args := 	b.MustSql()


	rows, err := run.Query(ctx, query, args...)
	if err != nil {
		return nil, fmt.Errorf("error querying database: %w", err)
	}
	
	return  userIter(rows), nil
}

func userIter(rows common.Rows)iterUser{
  return func(yield func(User) bool) {
    defer rows.Close()
   	userModel := &UserModel{}
    for rows.Next() {
        err := rows.Scan(
				&userModel.ID,
				&userModel.Name,
				&userModel.Email,
			)
		if err != nil {
			return
		}
    
		if !yield(ReverseConverter(*userModel) ) {
			return
		}
    }
  }
}