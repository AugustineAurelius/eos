//Code generated by generator, DO NOT EDIT.
package repository

import (
	"sort"
	"iter"
	"slices"
	"reflect"
    "github.com/google/uuid"
)


type Users []User
func (s Users) ToIDs ()  []uuid.UUID {
	output := make([]uuid.UUID, 0, len(s))
	for i := 0; i < len(s); i++{
    output = append(output, s[i].ID)
	}
	return output
}
func (s Users) ToNames ()  []string {
	output := make([]string, 0, len(s))
	for i := 0; i < len(s); i++{
    output = append(output, s[i].Name)
	}
	return output
}
func (s Users) ToEmails ()  []*string {
	output := make([]*string, 0, len(s))
	for i := 0; i < len(s); i++{
    output = append(output, s[i].Email)
	}
	return output
}
func (s Users) FindByID (finder uuid.UUID)  (User, bool) {
	for i := 0; i < len(s); i++{
		if s[i].ID  == finder {
			return s[i], true 
		}
	}
	return   User {}, false
}
func (s Users) FindByName (finder string)  (User, bool) {
	for i := 0; i < len(s); i++{
		if s[i].Name  == finder {
			return s[i], true 
		}
	}
	return   User {}, false
}
func (s Users) FindByEmail (finder *string)  (User, bool) {
	for i := 0; i < len(s); i++{
		if s[i].Email  == finder {
			return s[i], true 
		}
	}
	return   User {}, false
}
func (s Users) SortByName (asc bool)  Users {
	if asc {
		sort.Slice(s, func(i, j int) bool {
			return s[i].Name < s[j].Name
		})
		return s
	}	
	sort.Slice(s, func(i, j int) bool {
		return s[i].Name > s[j].Name
	})
	return  s
}
func (s Users) SortByEmail (asc bool)  Users {
	if asc {
		sort.Slice(s, func(i, j int) bool {
			return *s[i].Email < *s[j].Email
		})
		return s
	}	
	sort.Slice(s, func(i, j int) bool {
		return *s[i].Email > *s[j].Email
	})
	return  s
}




func (s Users) FilterFunc(f func(i User) bool)  Users {
	output := make(Users, 0, len(s))
	for i := 0; i < len(s); i++{ 
		if f(s[i]) {
			output = append(output, s[i])
		}
	}
	return output
}
func (s Users) GetFirstID()  (*uuid.UUID, bool) {
	if len(s) < 1 {
		return nil, false
	}
	return &s[0].ID, true
}
func (s Users) GetFirstName()  (*string, bool) {
	if len(s) < 1 {
		return nil, false
	}
	return &s[0].Name, true
}
func (s Users) GetFirstEmail()  (**string, bool) {
	if len(s) < 1 {
		return nil, false
	}
	return &s[0].Email, true
}



func (s Users) GetFirst()  (User, bool) {
	if len(s) < 1 {
		return User{}, false
	}
	return s[0], true
}

func (s Users) All() iterUser {
    return func(yield func(User) bool) {
        for _, elem := range s {
            if !yield(elem) {
                return
            }
        }
    }
}

// Iterators
type iterUser iter.Seq[User]

func (i iterUser) FilterFunc(predicate func(User) bool) iterUser {
    return func(yield func(User) bool) {
        for elem := range i {
            if predicate(elem) && !yield(elem) {
                return
            }
        }
    }
}


func (i iterUser) Map(transform func(User) User) iterUser {
    return func(yield func(User) bool) {
        for elem := range i {
            if !yield(transform(elem)) {
                return
            }
        }
    }
}

func (i iterUser) Take(n int) iterUser  {
	count := 0
	return func(yield func(User) bool) {
		for elem := range i {
			if count >= n || !yield(elem) {
				return
			}
			count++
		}
	}
}

func (i iterUser) Find(findFunc func(User) bool) iterUser {
	return func(yield func(User) bool ){
	  for elem := range i {
            if findFunc(elem) && !yield(elem) {
                return
            }
        }
	}
}

// doesnot work with pointers
func (i iterUser) Distinct(keyFunc func(User) any) iterUser {
    seen := make(map[any]bool)
    return func(yield func(User) bool) {
        for elem := range i {
            key := keyFunc(elem)
			if key != nil {
                val := reflect.ValueOf(key)
                switch val.Kind() {
                case reflect.Ptr, reflect.Interface, 
                     reflect.Slice, reflect.Map, 
                     reflect.Chan, reflect.Func:
                    if val.IsNil() {
                        continue
                    }
                }
            }
            if !seen[key] {
                seen[key] = true
                if !yield(elem) {
                    return
                }
            }
        }
    }
}
func (i iterUser) FilterByID(id uuid.UUID) iterUser {
	return func(yield func(User) bool ){
	  for elem := range i {
            if id == elem.ID && !yield(elem) {
                return
            }
        }
	}
}
func (i iterUser) FilterByName(name string) iterUser {
	return func(yield func(User) bool ){
	  for elem := range i {
            if name == elem.Name && !yield(elem) {
                return
            }
        }
	}
}
func (i iterUser) FilterByEmail(email *string) iterUser {
	return func(yield func(User) bool ){
	  for elem := range i {
            if email == elem.Email && !yield(elem) {
                return
            }
        }
	}
}

func (i iterUser) First() (User, bool) {
    for elem := range i {
        return elem, true
    }
    return User{}, false
}


func (i iterUser) ForEach(f func(User) )  {
	for elem := range i {
		f(elem)
	}
}

func (i iterUser) Collect() ([]User) {
	return slices.Collect(iter.Seq[User](i))
}