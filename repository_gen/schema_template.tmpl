//Code generated by generator, DO NOT EDIT.
package {{.PackageName}}

import (
	"database/sql/driver"
	"fmt"
	"github.com/google/uuid"
)

// {{.MessageName}} represents the {{.MessageName}} message.
type {{.MessageName}}Model struct {
{{- range .Fields }}
	{{.Name}} {{.Type}}
{{- end }}
}

// Table and column name constants for {{.MessageName}}
const (
	Table{{.MessageName}} = "{{.TableName}}"
{{- range .Fields }}
	Column{{$.MessageName}}{{.Name}} = "{{.Column}}"
{{- end }}
)

// Scan implements the Scanner interface for {{.MessageName}}Model.
func (m *{{.MessageName}}Model) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	// Assuming the value is a map[string]interface{} representing the row
	row, ok := value.(map[string]interface{})
	if !ok {
		return fmt.Errorf("expected map[string]interface{}, got %T", value)
	}

	// Scan each field
{{- range .Fields }}
	if val, ok := row[Column{{$.MessageName}}{{.Name}}]; ok {
		switch v := val.(type) {
		case {{.Type}}:
			m.{{.Name}} = v
		default:
			return fmt.Errorf("unexpected type for {{.Name}}: got %T, expected {{.Type}}", val)
		}
	}
{{- end }}

	return nil
}

// Value implements the Valuer interface for {{.MessageName}}Model.
func (m {{.MessageName}}Model) Value() (driver.Value, error) {
	// Convert the struct into a map[string]interface{}
	row := make(map[string]interface{})
{{- range .Fields }}
	row[Column{{$.MessageName}}{{.Name}}] = m.{{.Name}}
{{- end }}
	return row, nil
}
