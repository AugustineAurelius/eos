// Code generated by generator, DO NOT EDIT.
package {{.PackageName}}_test

import (
	"context"
	"fmt"
	"testing"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"{{.ModulePath}}"
)

// MockDB is a mock implementation of the database interface.
type MockDB struct {
	mock.Mock
}

func (m *MockDB) Begin(ctx context.Context) (pgx.Tx, error) {
	callArgs := m.Called(ctx)
	return callArgs.Get(0).(pgx.Tx), callArgs.Error(1)
}

func (m *MockDB) Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error) {
	callArgs := m.Called(ctx, sql, arguments)
	return callArgs.Get(0).(pgconn.CommandTag), callArgs.Error(1)
}

func (m *MockDB) Query(ctx context.Context, sql string, optionsAndArgs ...interface{}) (pgx.Rows, error) {
	callArgs := m.Called(ctx, sql, optionsAndArgs)
	return callArgs.Get(0).(pgx.Rows), callArgs.Error(1)
}

func (m *MockDB) QueryRow(ctx context.Context, sql string, optionsAndArgs ...interface{}) pgx.Row {
	callArgs := m.Called(ctx, sql, optionsAndArgs)
	return callArgs.Get(0).(pgx.Row)
}

func TestCreate{{.MessageName}}(t *testing.T) {
	testCases := []struct {
		name          string
		{{.MessageName | lower}} *{{.PackageName}}.{{.MessageName}}
		mockExpect    func() *MockDB
		expectedError error
	}{
		{
			name: "Success",
			{{.MessageName | lower}}: &{{.PackageName}}.{{.MessageName}}{
				// Initialize fields here
			},
			mockExpect: func() *MockDB {
				mockDB := new(MockDB)
				mockDB.On("Exec", mock.Anything, mock.Anything, mock.Anything).Return(pgconn.CommandTag{}, nil)
				return mockDB
			},
			expectedError: nil,
		},
		{
			name: "Database Error",
			{{.MessageName | lower}}: &{{.PackageName}}.{{.MessageName}}{
				// Initialize fields here
			},
			mockExpect: func() *MockDB {
				mockDB := new(MockDB)
				mockDB.On("Exec", mock.Anything, mock.Anything, mock.Anything).Return(pgconn.CommandTag{}, fmt.Errorf("database error"))
				return mockDB
			},
			expectedError: fmt.Errorf("failed to exec create query %s with args %v", mock.Anything, mock.Anything),
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(tt *testing.T) {
			err := {{.PackageName}}.New(tc.mockExpect()).Create{{.MessageName}}(context.Background(), tc.{{.MessageName | lower}})

			if tc.expectedError == nil {
				assert.NoError(tt, err)
			} else {
				assert.Error(tt, err)
			}
		})
	}
}
